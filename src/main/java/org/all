=== ./Menu_Choose_Hero.java ===
package org.plefevre;

import org.jline.reader.LineReader;
import org.jline.reader.LineReaderBuilder;
import org.jline.terminal.Terminal;
import org.jline.terminal.TerminalBuilder;
import org.plefevre.Model.Hero;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Locale;


public class Menu_Choose_Hero extends Menu {

    @Override
    public boolean interaction() {
        ArrayList<Hero> heroes = Hero.getHeroesSaved();

        try (Terminal terminal = TerminalBuilder.terminal()) {
            LineReader reader = LineReaderBuilder.builder().terminal(terminal).build();


            System.out.println(Color.BLUE + "Welcome to our great game, please choose or create a Hero" + Color.RESET);

            while (true) {
                System.out.println(Color.CYAN + "--------------------------------------------" + Color.RESET);


                if (heroes == null || heroes.size() == 0)
                    System.out.println(Color.RED + "You have no Hero created" + Color.RESET);
                else {

                    System.out.println(Color.GREEN + "List of saved Heroes:" + Color.RESET);
                    for (int i = 0; i < heroes.size(); i++) {
                        Hero hero = heroes.get(i);
                        System.out.println("  [" + Color.YELLOW + i + Color.RESET + "] : " + hero.className.toUpperCase(Locale.ROOT) + " lvl" + hero.lvl + " " + hero.name);
                    }
//                Game.game.setHero(0);
//                Game.game.initGame();
//                Menu.menu = Game.game;
//                if (true) return true;
                }

                //TODO Remove


                System.out.println();
                System.out.println(Color.CYAN + "[C]  : Create a Hero" + Color.RESET);
                System.out.println(Color.CYAN + "[E]  : Exit" + Color.RESET);

                String input = reader.readLine().trim();

                if (input.equalsIgnoreCase("E")) {

                    System.out.println(Color.RED + "Bye!" + Color.RESET);
                    return false;
                } else if (input.equalsIgnoreCase("C")) {

                    createHero(reader);

                } else {
                    try {
                        int chosenHero = Integer.parseInt(input);
                        if (chosenHero >= 0 && chosenHero < (heroes != null ? heroes.size() : 0)) {
                            Hero selectedHero = heroes.get(chosenHero);

                            Game.game.setHero(chosenHero);
                            Game.game.initGame();

                            Menu.menu = Game.game;
                            System.out.println(Color.YELLOW + "You have selected " + selectedHero.name + " the " + selectedHero.className + Color.RESET);
                            return true;
                        } else {
                            System.out.println(Color.RED + "Invalid choice. Please select a valid hero number." + Color.RESET);
                        }
                    } catch (NumberFormatException e) {
                        System.out.println(Color.RED + "Invalid input. Please enter a number or 'C' to create a new hero." + Color.RESET);
                    }
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public boolean createHero(LineReader scanner) {
        System.out.println(Color.GREEN + "Creating a new Hero:" + Color.RESET);


        System.out.println("Please enter a name for your hero:");
        String heroName = scanner.readLine().trim();


        String[] classes = {"Warrior", "Mage", "Archey"};
        System.out.println("Choose a class for your hero:");
        for (int i = 0; i < classes.length; i++) {
            System.out.println("  [" + i + "] " + classes[i]);
        }

        String className = "";
        while (true) {
            try {
                int classChoice = Integer.parseInt(scanner.readLine().trim());
                if (classChoice >= 0 && classChoice < classes.length) {
                    className = classes[classChoice];
                    break;
                } else {
                    System.out.println(Color.RED + "Invalid class choice. Please select a valid class number." + Color.RESET);
                }
            } catch (NumberFormatException e) {
                System.out.println(Color.RED + "Invalid input. Please enter a number." + Color.RESET);
            }
        }

        int attack = 0, defense = 0, hitPoints = 0;
        int pointsLeft = 5;

        while (pointsLeft > 0) {
            System.out.println("You have " + Color.YELLOW + pointsLeft + Color.RESET + " points left to distribute between attack, defense and hit points.");
            System.out.println("Enter points for attack (current: " + attack + "):");
            int previous = attack;
            attack += getValidPoints(scanner, pointsLeft);
            pointsLeft -= attack - previous;

            if (pointsLeft > 0) {
                System.out.println("Enter points for defense (current: " + defense + "):");
                previous = defense;
                defense += getValidPoints(scanner, pointsLeft);
                pointsLeft -= defense - previous;
            }

            if (pointsLeft > 0) {
                System.out.println("Enter points for hit points (current: " + hitPoints + "):");
                previous = hitPoints;
                hitPoints += getValidPoints(scanner, pointsLeft);
                pointsLeft -= hitPoints - previous;
            }
        }

        Hero newHero = new Hero(heroName, className);
        newHero.attack = attack;
        newHero.defense = defense;
        newHero.hit_point = hitPoints;
        newHero.displayHero();

        Hero.addHero(newHero);
        ArrayList<Hero> heroes = Hero.getHeroesSaved();

        Game.game.setHero(heroes.size() - 1);
        Game.game.initGame();
        Menu.menu = Game.game;

        return true;
    }


    private int getValidPoints(LineReader scanner, int maxPoints) {
        while (true) {
            try {
                int points = Integer.parseInt(scanner.readLine().trim());
                if (points >= 0 && points <= maxPoints) {
                    return points;
                } else {
                    System.out.println(Color.RED + "Invalid input. You have " + maxPoints + " points left." + Color.RESET);
                }
            } catch (NumberFormatException e) {
                System.out.println(Color.RED + "Invalid input. Please enter a valid number." + Color.RESET);
            }
        }
    }
}
=== ./Input.java ===
package org.plefevre;

import org.jline.keymap.KeyMap;
import org.jline.reader.*;
import org.jline.terminal.Terminal;
import org.jline.terminal.TerminalBuilder;

import java.io.IOException;
import java.util.Scanner;

public class Input {

    String text = "";
    boolean enter = false;
    boolean listen_tap = false;
    boolean reload = false;
    int listen_x = 0;
    int listen_y = 0;

    int touch = -1;

    boolean is_tab;

    public void listen() {

        is_tab = false;
        enter = false;
        touch = -1;

        if(reload)
        {
            reload = false;
            return;
        }

        try (Terminal terminal = TerminalBuilder.terminal()) {
            LineReader reader = LineReaderBuilder.builder().terminal(terminal).build();

            if (!listen_tap) {
                terminal.enterRawMode();
                int c = terminal.reader().read();  // Read a single character from the terminal
                switch (c) {
                    case 27: // ESC sequence, typically used for arrow keys
                        if (terminal.reader().read() == '[') {  // Expecting a sequence starting with ESC + [
                            int arrowKey = terminal.reader().read();
                            switch (arrowKey) {
                                case 'A':
                                    touch = 1;
                                    break;
                                case 'B':
                                    touch = 2;
                                    break;
                                case 'C':
                                    touch = 3;
                                    break;
                                case 'D':
                                    touch = 4;
                                    break;
                            }
                        }
                        break;
                    case '\t': // Tab key
                        is_tab = true;
                        break;
                    case '\r': // Enter key
                        touch = 5;
                        break;
                    default:
//                        text += (char) c;
                        break;
                }


            } else {
                reader.getWidgets().put("interruptOnTab", new Widget() {
                    @Override
                    public boolean apply() {
                        System.out.println("Touche Tab détectée, interrompre la lecture !");
                        String partialLine = reader.getBuffer().toString();
                        is_tab = true;
                        throw new UserInterruptException(partialLine);
                    }
                });

                KeyMap<Binding> keyMap = reader.getKeyMaps().get(LineReader.MAIN);
                keyMap.bind(reader.getWidgets().get("interruptOnTab"), "\t"); // Associer la touche "Tab"

                String ignoredPrefix = "\001"; // Equivalent de LineReader.PROMPT_IGNORED_PREFIX
                String ignoredSuffix = "\002"; // Equivalent de LineReader.PROMPT_IGNORED_SUFFIX

                // Séquence ANSI pour déplacer le curseur
//            String moveCursor = "\033[" + 50 + ";" + 5 + "H";

                // Construire le prompt avec la séquence de déplacement du curseur
                String prompt = "$> ";

                String moveCursor = "\033[" + listen_y + ";" + listen_x + "H";  // 30 = ligne, 10 = colonne
                terminal.writer().print(moveCursor);
                terminal.flush();

                text = reader.readLine(prompt);
                enter = true;
            }
        } catch (UserInterruptException e) {
            text = e.getPartialLine();
        } catch (IOException e) {
            System.err.println("Erreur d'entrée/sortie : " + e.getMessage());
        }

    }

    public void reload() {
        reload = true;
        touch = 0;
    }

    public int getListen_x() {
        return listen_x;
    }

    public int getListen_y() {
        return listen_y;
    }

    public int getTouch() {
        return touch;
    }

    public boolean isIs_tab() {
        return is_tab;
    }

    public boolean isListen_tap() {
        return listen_tap;
    }

    public void setListen_tap(boolean listen_tap) {
        this.listen_tap = listen_tap;
    }

    public void setListen_x(int listen_x) {
        this.listen_x = listen_x;
    }

    public void setListen_y(int listen_y) {
        this.listen_y = listen_y;
    }

    public boolean isEnter() {
        return enter;
    }

    public String getText() {
        return text;
    }

    public void setText(String s) {
        text = s;
    }
}
=== ./TerminalSize.java ===
package org.plefevre;

import java.io.BufferedReader;
import java.io.InputStreamReader;

public class TerminalSize {

    public static int[] getTerminalSize() {
        try {
            Process process = Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "stty size </dev/tty"});
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String[] size = reader.readLine().split(" ");
            int rows = Integer.parseInt(size[0]) - 1;//TODO remove -1
            int columns = Integer.parseInt(size[1]);
            return new int[]{rows, columns};
        } catch (Exception e) {
            e.printStackTrace();
            return new int[]{0, 0};  // Valeur par défaut si la taille n'est pas récupérable
        }
    }
}=== ./ArtifactLibrary.java ===
package org.plefevre;

import org.plefevre.Model.Hero;

import java.util.ArrayList;
import java.util.List;

public class ArtifactLibrary {
    private List<Artifact> artifacts = new ArrayList<>();

    public static ArtifactLibrary artifactLibrary = new ArtifactLibrary();

    public ArtifactLibrary() {
        populateLibrary();
    }

    private void populateLibrary() {
        // Armes de Guerrier
        artifacts.add(createWoodenSword());
        artifacts.add(createIronSword());
        artifacts.add(createSteelAxe());
        artifacts.add(createBronzeHammer());
        artifacts.add(createBattleAxe());
        artifacts.add(createKnightsSword());
        artifacts.add(createDragonSlayer());

        // Armes de Mage
        artifacts.add(createApprenticesStaff());
        artifacts.add(createOakWand());
        artifacts.add(createCrystalRod());
        artifacts.add(createSorcerersScepter());
        artifacts.add(createElementalStaff());
        artifacts.add(createEnchantedOrb());
        artifacts.add(createArchmagesStaff());

        // Armes d'Archer
        artifacts.add(createShortBow());
        artifacts.add(createHuntingBow());
        artifacts.add(createRecurveBow());
        artifacts.add(createLongBow());
        artifacts.add(createCrossbow());
        artifacts.add(createElvenBow());
        artifacts.add(createPhoenixBow());

        // Armures
        artifacts.add(createLeatherArmor());
        artifacts.add(createChainmail());
        artifacts.add(createSteelArmor());
        artifacts.add(createMageRobe());
        artifacts.add(createBattleArmor());
        artifacts.add(createDragonScaleArmor());
        artifacts.add(createElvenTunic());
        artifacts.add(createPhoenixArmor());
        artifacts.add(createClothTunic());
        artifacts.add(createGuardianArmor());
        artifacts.add(createShadowArmor());

        // Casques
        artifacts.add(createLeatherCap());
        artifacts.add(createClothHood());
        artifacts.add(createBronzeHelm());
        artifacts.add(createIronHelm());
        artifacts.add(createSteelHelm());
        artifacts.add(createWarriorHelm());
        artifacts.add(createMageHood());
        artifacts.add(createBattleHelm());
        artifacts.add(createElvenCrown());
        artifacts.add(createShadowHelm());
        artifacts.add(createDragonHelm());
        artifacts.add(createPhoenixHelm());
        artifacts.add(createShadowHood());

        // Potions
        artifacts.add(createHealthPotionLow());
        artifacts.add(createManaPotionLow());
        artifacts.add(createAttackPotionLow());
        artifacts.add(createDefensePotionLow());
        artifacts.add(createExperiencePotionLow());

        artifacts.add(createHealthPotionMid());
        artifacts.add(createManaPotionMid());
        artifacts.add(createAttackPotionMid());
        artifacts.add(createDefensePotionMid());
        artifacts.add(createExperiencePotionMid());

        artifacts.add(createHealthPotionHigh());
        artifacts.add(createManaPotionHigh());
        artifacts.add(createAttackPotionHigh());
        artifacts.add(createDefensePotionHigh());
        artifacts.add(createExperiencePotionHigh());

        //Rings
        artifacts.add(createRingOfStrength());
        artifacts.add(createRingOfProtection());
        artifacts.add(createRingOfVitality());
        artifacts.add(createRingOfPower());
        artifacts.add(createRingOfPrecision());
        artifacts.add(createRingOfEndurance());
        artifacts.add(createRingOfFortitude());
        artifacts.add(createRingOfLuck());
        artifacts.add(createRingOfFire());
        artifacts.add(createRingOfTheWarrior());
        artifacts.add(createRingOfTheMage());
        artifacts.add(createRingOfShadows());
        artifacts.add(createRingOfResilience());
        artifacts.add(createRingOfFury());
        artifacts.add(createRingOfThePhoenix());
        artifacts.add(createRingOfMastery());

        // Amulets
        artifacts.add(createAmuletOfPower());
        artifacts.add(createAmuletOfRegeneration());
        artifacts.add(createAmuletOfShielding());
        artifacts.add(createAmuletOfFortitude());
        artifacts.add(createAmuletOfSpirit());
        artifacts.add(createAmuletOfTheBerserker());
        artifacts.add(createAmuletOfTheTitan());
        artifacts.add(createAmuletOfVitality());
        artifacts.add(createAmuletOfMagicShield());
        artifacts.add(createAmuletOfResilience());
        artifacts.add(createAmuletOfShadows());
        artifacts.add(createAmuletOfMastery());
        artifacts.add(createAmuletOfEndurance());

        // Bracelets
        artifacts.add(createBraceletOfAgility());
        artifacts.add(createBraceletOfStrength());
        artifacts.add(createBraceletOfEndurance());
        artifacts.add(createBraceletOfFortitude());
        artifacts.add(createBraceletOfDefense());
        artifacts.add(createBraceletOfMagicDefense());
        artifacts.add(createBraceletOfEnergy());
        artifacts.add(createBraceletOfMana());
        artifacts.add(createBraceletOfProtection());
        artifacts.add(createBraceletOfTheBerserker());
        artifacts.add(createBraceletOfRegeneration());
        artifacts.add(createBraceletOfMastery());
        artifacts.add(createBraceletOfTheTitan());
        artifacts.add(createBraceletOfAttackBoost());
    }


    public List<Artifact> getAllArtifacts() {
        return artifacts;
    }

    public Artifact getArtifactByName(String name) {
        for (Artifact artifact : artifacts) {
            if (artifact.getName().equalsIgnoreCase(name)) {
                return artifact;
            }
        }
        return null;
    }

    public Artifact getArtifactByLevel(int lvl, int round) {

        ArrayList<Artifact> list = new ArrayList<>();
        for (Artifact artifact : artifacts) {
            if (artifact.getLvl() >= lvl - round && artifact.getLvl() <= lvl + round)
                list.add(artifact);
        }

        if (list.isEmpty())
            return null;

        return list.get((int) (list.size() * Math.random()));
    }


    private Artifact createWoodenSword() {
        Artifact woodenSword = new Artifact();
        woodenSword.setName("Wooden Sword");
        woodenSword.setType(Artifact.TYPE_WEAPON);
        woodenSword.setLvl(1);
        woodenSword.setAscii(("          " + "   ─╞══>  " + "          ").toCharArray());
        woodenSword.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 3, 3, 3, 3, 3, 3, 3, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        woodenSword.setClass_destination(Hero.CLASS_WARRIOR);
        return woodenSword;
    }

    private Artifact createIronSword() {
        Artifact ironSword = new Artifact();
        ironSword.setName("Iron Sword");
        ironSword.setType(Artifact.TYPE_WEAPON);
        ironSword.setLvl(3);
        ironSword.setAscii(("          " + "  O─╞═══>   " + "          ").toCharArray());
        ironSword.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 3, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        ironSword.setClass_destination(Hero.CLASS_WARRIOR);
        return ironSword;
    }

    private Artifact createSteelAxe() {
        Artifact steelAxe = new Artifact();
        steelAxe.setName("Steel Axe");
        steelAxe.setType(Artifact.TYPE_WEAPON);
        steelAxe.setLvl(5);
        steelAxe.setAscii(("   ┐      " + " O─╞════> " + "   ┘      ").toCharArray());
        steelAxe.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 3, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        steelAxe.setClass_destination(Hero.CLASS_WARRIOR);
        return steelAxe;
    }

    private Artifact createBronzeHammer() {
        Artifact bronzeHammer = new Artifact();
        bronzeHammer.setName("Bronze Hammer");
        bronzeHammer.setType(Artifact.TYPE_WEAPON);
        bronzeHammer.setLvl(8);
        bronzeHammer.setAscii(("     ▄▄▄  " + " O═══▒▒▒  " + "     ▀▀▀  ").toCharArray());
        bronzeHammer.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 3, 3, 3, 3, 3, 3, 3, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        bronzeHammer.setClass_destination(Hero.CLASS_WARRIOR);
        return bronzeHammer;
    }

    private Artifact createBattleAxe() {
        Artifact battleAxe = new Artifact();
        battleAxe.setName("Battle Axe");
        battleAxe.setType(Artifact.TYPE_WEAPON);
        battleAxe.setLvl(12);
        battleAxe.setAscii(("     ▄▄▄  " + " O════X>  " + "     ▀▀▀  ").toCharArray());
        battleAxe.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 3, 3, 3, 3, 1, 3, 3, 3,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        battleAxe.setClass_destination(Hero.CLASS_WARRIOR);
        return battleAxe;
    }

    private Artifact createKnightsSword() {
        Artifact knightsSword = new Artifact();
        knightsSword.setName("Knight's Sword");
        knightsSword.setType(Artifact.TYPE_WEAPON);
        knightsSword.setLvl(14);
        knightsSword.setAscii(("  ╖       " + "O─╢══════>" + "  ╜       ").toCharArray());
        knightsSword.setAscii_color(
                0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                0, 3, 1, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 1, 0, 0, 0, 0, 0, 0, 0);
        knightsSword.setClass_destination(Hero.CLASS_WARRIOR);
        return knightsSword;
    }

    private Artifact createDragonSlayer() {
        Artifact dragonSlayer = new Artifact();
        dragonSlayer.setName("Dragon Slayer");
        dragonSlayer.setType(Artifact.TYPE_WEAPON);
        dragonSlayer.setLvl(20);
        dragonSlayer.setAscii(("  ╥─>     " + "──╢" + Smiley.SMILEY_FIRE + "════> " + "  ╨─>     ").toCharArray());
        dragonSlayer.setAscii_color(
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
        dragonSlayer.setClass_destination(Hero.CLASS_WARRIOR);
        return dragonSlayer;
    }


    private Artifact createApprenticesStaff() {
        Artifact staff = new Artifact();
        staff.setName("Apprentice's Staff");
        staff.setType(Artifact.TYPE_WEAPON);
        staff.setLvl(1);
        staff.setAscii(("    o     " + "    |     " + "          ").toCharArray());
        staff.setAscii_color(
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        staff.setClass_destination(Hero.CLASS_MAGE);
        return staff;
    }

    private Artifact createOakWand() {
        Artifact wand = new Artifact();
        wand.setName("Oak Wand");
        wand.setType(Artifact.TYPE_WEAPON);
        wand.setLvl(3);
        wand.setAscii(("    o     " + "    |     " + "    |     ").toCharArray());
        wand.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0);
        wand.setClass_destination(Hero.CLASS_MAGE);
        return wand;
    }

    private Artifact createCrystalRod() {
        Artifact rod = new Artifact();
        rod.setName("Crystal Rod");
        rod.setType(Artifact.TYPE_WEAPON);
        rod.setLvl(5);
        rod.setAscii(("   " + Smiley.SMILEY_CRYSTAL + "      " + "    |     " + "    |     ").toCharArray());
        rod.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0);
        rod.setClass_destination(Hero.CLASS_MAGE);
        return rod;
    }

    private Artifact createSorcerersScepter() {
        Artifact scepter = new Artifact();
        scepter.setName("Sorcerer's Scepter");
        scepter.setType(Artifact.TYPE_WEAPON);
        scepter.setLvl(8);
        scepter.setAscii(("    ■     " + "    ║     " + "    ║     ").toCharArray());
        scepter.setAscii_color(
                0, 0, 0, 0, 5, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0);
        scepter.setClass_destination(Hero.CLASS_MAGE);
        return scepter;
    }

    private Artifact createElementalStaff() {
        Artifact staff = new Artifact();
        staff.setName("Elemental Staff");
        staff.setType(Artifact.TYPE_WEAPON);
        staff.setLvl(12);
        staff.setAscii(("    ░     " + "    ║     " + "    ║     ").toCharArray());
        staff.setAscii_color(
                0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0);
        staff.setClass_destination(Hero.CLASS_MAGE);
        return staff;
    }

    private Artifact createEnchantedOrb() {
        Artifact orb = new Artifact();
        orb.setName("Enchanted Orb");
        orb.setType(Artifact.TYPE_WEAPON);
        orb.setLvl(14);
        orb.setAscii(("    O     " + "    ║     " + "    ║     ").toCharArray());
        orb.setAscii_color(
                0, 0, 0, 0, 4, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0);
        orb.setClass_destination(Hero.CLASS_MAGE);
        return orb;
    }

    private Artifact createArchmagesStaff() {
        Artifact staff = new Artifact();
        staff.setName("Archmage's Staff");
        staff.setType(Artifact.TYPE_WEAPON);
        staff.setLvl(21);
        staff.setAscii(("    ▓     " + "    │     " + "    │     ").toCharArray());
        staff.setAscii_color(
                0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0);
        staff.setClass_destination(Hero.CLASS_MAGE);
        return staff;
    }


    private Artifact createShortBow() {
        Artifact shortBow = new Artifact();
        shortBow.setName("Short Bow");
        shortBow.setType(Artifact.TYPE_WEAPON);
        shortBow.setLvl(1);
        shortBow.setAscii(("          " + "    ⌠)    " + "          ").toCharArray());
        shortBow.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 3, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        shortBow.setClass_destination(Hero.CLASS_ARCHER);
        return shortBow;
    }

    private Artifact createHuntingBow() {
        Artifact huntingBow = new Artifact();
        huntingBow.setName("Hunting Bow");
        huntingBow.setType(Artifact.TYPE_WEAPON);
        huntingBow.setLvl(3);
        huntingBow.setAscii(("          " + "    |\\    " + "    |/    ").toCharArray());
        huntingBow.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 3, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 3, 0, 0, 0, 0);
        huntingBow.setClass_destination(Hero.CLASS_ARCHER);
        return huntingBow;
    }

    private Artifact createRecurveBow() {
        Artifact recurveBow = new Artifact();
        recurveBow.setName("Recurve Bow");
        recurveBow.setType(Artifact.TYPE_WEAPON);
        recurveBow.setLvl(5);
        recurveBow.setAscii(("          " + "    ⌠\\    " + "    ⌡/    ").toCharArray());
        recurveBow.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 3, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 3, 0, 0, 0, 0);
        recurveBow.setClass_destination(Hero.CLASS_ARCHER);
        return recurveBow;
    }

    private Artifact createLongBow() {
        Artifact longBow = new Artifact();
        longBow.setName("Long Bow");
        longBow.setType(Artifact.TYPE_WEAPON);
        longBow.setLvl(8);
        longBow.setAscii(("    |\\     " + "   | |    " + "   |/     ").toCharArray());
        longBow.setAscii_color(
                0, 0, 0, 0, 0, 3, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 3, 3, 0, 0, 0,
                0, 0, 0, 0, 0, 3, 0, 0, 0, 0);
        longBow.setClass_destination(Hero.CLASS_ARCHER);
        return longBow;
    }

    private Artifact createCrossbow() {
        Artifact crossbow = new Artifact();
        crossbow.setName("Crossbow");
        crossbow.setType(Artifact.TYPE_WEAPON);
        crossbow.setLvl(12);
        crossbow.setAscii(("     |\\    " + "  ══╪═╪   " + "    |/    ").toCharArray());
        crossbow.setAscii_color(
                0, 0, 0, 0, 0, 3, 3, 0, 0, 0,
                0, 0, 3, 3, 3, 3, 3, 3, 0, 0,
                0, 0, 0, 0, 0, 3, 3, 0, 0, 0);
        crossbow.setClass_destination(Hero.CLASS_ARCHER);
        return crossbow;
    }

    private Artifact createElvenBow() {
        Artifact elvenBow = new Artifact();
        elvenBow.setName("Elven Bow");
        elvenBow.setType(Artifact.TYPE_WEAPON);
        elvenBow.setLvl(14);
        elvenBow.setAscii(("    ⌠\\     " + "   | |    " + "   ⌡/     ").toCharArray());
        elvenBow.setAscii_color(
                0, 0, 0, 0, 0, 3, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 3, 0, 0, 0,
                0, 0, 0, 0, 0, 3, 0, 0, 0, 0);
        elvenBow.setClass_destination(Hero.CLASS_ARCHER);
        return elvenBow;
    }

    private Artifact createPhoenixBow() {
        Artifact phoenixBow = new Artifact();
        phoenixBow.setName("Phoenix Bow");
        phoenixBow.setType(Artifact.TYPE_WEAPON);
        phoenixBow.setLvl(21);
        phoenixBow.setAscii(("   " + Smiley.SMILEY_FIRE + " \\     " + "  " + Smiley.SMILEY_FIRE + "  |    " + "  " + Smiley.SMILEY_FIRE + " /     ").toCharArray());
        phoenixBow.setAscii_color(
                0, 0, 0, 0, 0, 3, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 3, 0, 0, 0,
                0, 0, 0, 0, 0, 3, 0, 0, 0, 0);
        phoenixBow.setClass_destination(Hero.CLASS_ARCHER);
        return phoenixBow;
    }


    private Artifact createLeatherArmor() {
        Artifact leatherArmor = new Artifact();
        leatherArmor.setName("Leather Armor");
        leatherArmor.setType(Artifact.TYPE_ARMOR);
        leatherArmor.setLvl(2);
        leatherArmor.setAscii(("  ▄▄  ▄▄   " + "  ▐▓▓▌    " + "  ▐▓▓▌    ").toCharArray());
        leatherArmor.setAscii_color(
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3);
        return leatherArmor;
    }

    private Artifact createChainmail() {
        Artifact chainmail = new Artifact();
        chainmail.setName("Chainmail");
        chainmail.setType(Artifact.TYPE_ARMOR);
        chainmail.setLvl(5);
        chainmail.setAscii(("  ▄▄  ▄▄   " + "  ▐░░▌    " + "  ▐░░▌    ").toCharArray());
        chainmail.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 7, 7, 0, 0, 0, 0,
                0, 0, 0, 0, 7, 7, 0, 0, 0, 0);
        return chainmail;
    }

    private Artifact createSteelArmor() {
        Artifact steelArmor = new Artifact();
        steelArmor.setName("Steel Armor");
        steelArmor.setType(Artifact.TYPE_ARMOR);
        steelArmor.setLvl(8);
        steelArmor.setAscii(("  ▄▄  ▄▄   " + "  ▐██▌    " + "  ▐██▌    ").toCharArray());
        steelArmor.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return steelArmor;
    }

    private Artifact createMageRobe() {
        Artifact mageRobe = new Artifact();
        mageRobe.setName("Mage's Robe");
        mageRobe.setType(Artifact.TYPE_ARMOR);
        mageRobe.setLvl(6);
        mageRobe.setAscii(("   ▄  ▄    " + " ▐████▌   " + " ██████   ").toCharArray());
        mageRobe.setAscii_color(
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5);
        return mageRobe;
    }

    private Artifact createBattleArmor() {
        Artifact battleArmor = new Artifact();
        battleArmor.setName("Battle Armor");
        battleArmor.setType(Artifact.TYPE_ARMOR);
        battleArmor.setLvl(10);
        battleArmor.setAscii(("  ▄▄  ▄▄   " + "  ▐██▌    " + "  ▄██▄    ").toCharArray());
        battleArmor.setAscii_color(
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                0, 0, 0, 1, 0, 0, 1, 0, 0, 0,
                0, 0, 0, 1, 0, 0, 1, 0, 0, 0);
        return battleArmor;
    }

    private Artifact createDragonScaleArmor() {
        Artifact dragonScaleArmor = new Artifact();
        dragonScaleArmor.setName("Dragon Scale Armor");
        dragonScaleArmor.setType(Artifact.TYPE_ARMOR);
        dragonScaleArmor.setLvl(18);
        dragonScaleArmor.setAscii(("  ▀█▄▄█▀   " + "  ▐" + Smiley.SMILEY_FIRE + " ▌    " + "   ▀▀     ").toCharArray());
        dragonScaleArmor.setAscii_color(
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
        return dragonScaleArmor;
    }

    private Artifact createElvenTunic() {
        Artifact elvenTunic = new Artifact();
        elvenTunic.setName("Elven Tunic");
        elvenTunic.setType(Artifact.TYPE_ARMOR);
        elvenTunic.setLvl(12);
        elvenTunic.setAscii(("   ╕  ╒    " + "  │░░│    " + "  │░░│    ").toCharArray());
        elvenTunic.setAscii_color(
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2);
        return elvenTunic;
    }

    private Artifact createPhoenixArmor() {
        Artifact phoenixArmor = new Artifact();
        phoenixArmor.setName("Phoenix Armor");
        phoenixArmor.setType(Artifact.TYPE_ARMOR);
        phoenixArmor.setLvl(20);
        phoenixArmor.setAscii(("  ▀█▄▄█▀   " + "  ▐" + Smiley.SMILEY_FIRE + " ▌    " + "  ▐▀▀▌    ").toCharArray());
        phoenixArmor.setAscii_color(
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
        return phoenixArmor;
    }


    private Artifact createClothTunic() {
        Artifact clothTunic = new Artifact();
        clothTunic.setName("Cloth Tunic");
        clothTunic.setType(Artifact.TYPE_ARMOR);
        clothTunic.setLvl(1);
        clothTunic.setAscii(("   \\  /   " + "   |  |   " + "   |..|   ").toCharArray());
        clothTunic.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return clothTunic;
    }

    private Artifact createGuardianArmor() {
        Artifact guardianArmor = new Artifact();
        guardianArmor.setName("Guardian Armor");
        guardianArmor.setType(Artifact.TYPE_ARMOR);
        guardianArmor.setLvl(14);
        guardianArmor.setAscii(("   \\  /   " + "   |XX|   " + "   |XX|   ").toCharArray());
        guardianArmor.setAscii_color(
                0, 0, 0, 1, 0, 0, 1, 0, 0, 0,
                0, 0, 0, 1, 0, 0, 1, 0, 0, 0,
                0, 0, 0, 1, 0, 0, 1, 0, 0, 0);
        return guardianArmor;
    }

    private Artifact createShadowArmor() {
        Artifact shadowArmor = new Artifact();
        shadowArmor.setName("Shadow Armor");
        shadowArmor.setType(Artifact.TYPE_ARMOR);
        shadowArmor.setLvl(16);
        shadowArmor.setAscii(("  \\\\  //  " + "   |¯¯|   " + "   └──┘   ").toCharArray());
        shadowArmor.setAscii_color(
                0, 0, 1, 1, 0, 0, 1, 1, 0, 0,
                0, 0, 0, 1, 0, 0, 1, 0, 0, 0,
                0, 0, 0, 1, 0, 0, 1, 0, 0, 0);
        return shadowArmor;
    }

    private Artifact createLeatherCap() {
        Artifact leatherCap = new Artifact();
        leatherCap.setName("Leather Cap");
        leatherCap.setType(Artifact.TYPE_HELM);
        leatherCap.setLvl(1);
        leatherCap.setAscii(("   ▄  ▄    " + " ▐░░░░▌   " + " █░░░░█   ").toCharArray());
        leatherCap.setAscii_color(
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3);
        return leatherCap;
    }

    private Artifact createClothHood() {
        Artifact clothHood = new Artifact();
        clothHood.setName("Cloth Hood");
        clothHood.setType(Artifact.TYPE_HELM);
        clothHood.setLvl(2);
        clothHood.setAscii(("   \\  /   " + "   |xx|   " + "   |xx|   ").toCharArray());
        clothHood.setAscii_color(
                0, 0, 0, 2, 0, 0, 2, 0, 0, 0,
                0, 0, 0, 2, 3, 3, 2, 0, 0, 0,
                0, 0, 0, 2, 3, 3, 2, 0, 0, 0);
        return clothHood;
    }

    private Artifact createBronzeHelm() {
        Artifact bronzeHelm = new Artifact();
        bronzeHelm.setName("Bronze Helm");
        bronzeHelm.setType(Artifact.TYPE_HELM);
        bronzeHelm.setLvl(3);
        bronzeHelm.setAscii(("  ▄▄▄▄▄   " + "  █▄▀▄█   " + "  ▀▀ ▀▀   ").toCharArray());
        bronzeHelm.setAscii_color(
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3);
        return bronzeHelm;
    }

    private Artifact createIronHelm() {
        Artifact ironHelm = new Artifact();
        ironHelm.setName("Iron Helm");
        ironHelm.setType(Artifact.TYPE_HELM);
        ironHelm.setLvl(5);
        ironHelm.setAscii(("  ▄▄▒▄▄   " + "  █▄▀▄█   " + "  ▀▀ ▀▀   ").toCharArray());
        ironHelm.setAscii_color(
                0, 0, 0, 0, 6, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return ironHelm;
    }


    private Artifact createSteelHelm() {
        Artifact steelHelm = new Artifact();
        steelHelm.setName("Steel Helm");
        steelHelm.setType(Artifact.TYPE_HELM);
        steelHelm.setLvl(8);
        steelHelm.setAscii(("  ▄▄█▄▄   " + "  █▄▀▄█   " + "  ▀▀ ▀▀   ").toCharArray());
        steelHelm.setAscii_color(
                0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return steelHelm;
    }

    private Artifact createWarriorHelm() {
        Artifact warriorHelm = new Artifact();
        warriorHelm.setName("Warrior's Helm");
        warriorHelm.setType(Artifact.TYPE_HELM);
        warriorHelm.setLvl(9);
        warriorHelm.setAscii(("  ▄▄▄▄▄   " + "  █▄▀▄█   " + "  █▀▀▀█   ").toCharArray());
        warriorHelm.setAscii_color(
                0, 0, 1, 0, 1, 0, 1, 0, 0, 0,
                0, 0, 1, 0, 1, 0, 1, 0, 0, 0,
                0, 0, 1, 0, 1, 0, 1, 0, 0, 0);
        return warriorHelm;
    }

    private Artifact createMageHood() {
        Artifact mageHood = new Artifact();
        mageHood.setName("Mage's Hood");
        mageHood.setType(Artifact.TYPE_HELM);
        mageHood.setLvl(7);
        mageHood.setAscii(("    /\\    " + "   /  \\   " + "  /____\\  ").toCharArray());
        mageHood.setAscii_color(
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5);
        return mageHood;
    }

    private Artifact createBattleHelm() {
        Artifact battleHelm = new Artifact();
        battleHelm.setName("Battle Helm");
        battleHelm.setType(Artifact.TYPE_HELM);
        battleHelm.setLvl(10);
        battleHelm.setAscii(("  ▄▄▄▄▄   " + "  █▄▀▄█   " + "  ▀|||▀   ").toCharArray());
        battleHelm.setAscii_color(
                0, 0, 1, 1, 1, 1, 1, 0, 0, 0,
                0, 0, 1, 0, 1, 0, 1, 0, 0, 0,
                0, 0, 0, 1, 1, 1, 0, 0, 0, 0);
        return battleHelm;
    }


    private Artifact createElvenCrown() {
        Artifact elvenCrown = new Artifact();
        elvenCrown.setName("Elven Crown");
        elvenCrown.setType(Artifact.TYPE_HELM);
        elvenCrown.setLvl(12);
        elvenCrown.setAscii((" o o o o  " + " █▄█▄█▄█  " + "          ").toCharArray());
        elvenCrown.setAscii_color(
                6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2);
        return elvenCrown;
    }

    private Artifact createShadowHelm() {
        Artifact shadowHelm = new Artifact();
        shadowHelm.setName("Shadow Helm");
        shadowHelm.setType(Artifact.TYPE_HELM);
        shadowHelm.setLvl(16);
        shadowHelm.setAscii(("   ____   " + "  /____\\  " + "          ").toCharArray());
        shadowHelm.setAscii_color(
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3);
        return shadowHelm;
    }

    private Artifact createDragonHelm() {
        Artifact dragonHelm = new Artifact();
        dragonHelm.setName("Dragon Helm");
        dragonHelm.setType(Artifact.TYPE_HELM);
        dragonHelm.setLvl(18);
        dragonHelm.setAscii(("  " + Smiley.SMILEY_FIRE + "▄▄" + Smiley.SMILEY_FIRE + "    " + "  █▀█▀█   " + "  ██ ██   ").toCharArray());
        dragonHelm.setAscii_color(
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
        return dragonHelm;
    }

    private Artifact createPhoenixHelm() {
        Artifact phoenixHelm = new Artifact();
        phoenixHelm.setName("Phoenix Helm");
        phoenixHelm.setType(Artifact.TYPE_HELM);
        phoenixHelm.setLvl(20);
        phoenixHelm.setAscii(("  " + Smiley.SMILEY_FIRE + "▄▄" + Smiley.SMILEY_FIRE + "    " + "  █▀█▀█   " + "  █▀ ▀█   ").toCharArray());
        phoenixHelm.setAscii_color(
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
        return phoenixHelm;
    }

    private Artifact createShadowHood() {
        Artifact shadowHood = new Artifact();
        shadowHood.setName("Shadow Hood");
        shadowHood.setType(Artifact.TYPE_HELM);
        shadowHood.setLvl(14);
        shadowHood.setAscii(("   ____   " + "  /    \\  " + " /______\\ ").toCharArray());
        shadowHood.setAscii_color(
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5);
        return shadowHood;
    }

    private Artifact createHealthPotionLow() {
        Artifact potion = new Artifact();
        potion.setName("Minor Health Potion");
        potion.setType(Artifact.TYPE_POTION);
        potion.setLvl(1);
        potion.setAscii(("    ││    " + "    ▐▌    " + "    ▐▌    ").toCharArray());
        potion.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
                0, 0, 0, 0, 1, 1, 0, 0, 0, 0);
        return potion;
    }

    private Artifact createManaPotionLow() {
        Artifact potion = new Artifact();
        potion.setName("Minor Mana Potion");
        potion.setType(Artifact.TYPE_POTION);
        potion.setLvl(1);
        potion.setAscii(("    ││    " + "    ▐▌    " + "    ▐▌    ").toCharArray());
        potion.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 4, 4, 0, 0, 0, 0,
                0, 0, 0, 0, 4, 4, 0, 0, 0, 0);
        return potion;
    }

    private Artifact createAttackPotionLow() {
        Artifact potion = new Artifact();
        potion.setName("Minor Attack Potion");
        potion.setType(Artifact.TYPE_POTION);
        potion.setLvl(2);
        potion.setAscii(("    ││    " + "    ▐▌    " + "    ▐▌    ").toCharArray());
        potion.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 5, 5, 0, 0, 0, 0,
                0, 0, 0, 0, 5, 5, 0, 0, 0, 0);
        return potion;
    }

    private Artifact createDefensePotionLow() {
        Artifact potion = new Artifact();
        potion.setName("Minor Defense Potion");
        potion.setType(Artifact.TYPE_POTION);
        potion.setLvl(3);
        potion.setAscii(("    ││    " + "    ▐▌    " + "    ▐▌    ").toCharArray());
        potion.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 3, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 3, 0, 0, 0, 0);
        return potion;
    }

    private Artifact createExperiencePotionLow() {
        Artifact potion = new Artifact();
        potion.setName("Minor Experience Potion");
        potion.setType(Artifact.TYPE_POTION);
        potion.setLvl(4);
        potion.setAscii(("    ││    " + "    ▐▌    " + "    ▐▌    ").toCharArray());
        potion.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 2, 2, 0, 0, 0, 0,
                0, 0, 0, 0, 2, 2, 0, 0, 0, 0);
        return potion;
    }

    // Potions de niveau intermédiaire
    private Artifact createHealthPotionMid() {
        Artifact potion = new Artifact();
        potion.setName("Health Potion");
        potion.setType(Artifact.TYPE_POTION);
        potion.setLvl(8);
        potion.setAscii(("    ||    " + "   /██\\    " + "  \\██/    ").toCharArray());
        potion.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
                0, 0, 0, 0, 1, 1, 0, 0, 0, 0);
        return potion;
    }

    private Artifact createManaPotionMid() {
        Artifact potion = new Artifact();
        potion.setName("Mana Potion");
        potion.setType(Artifact.TYPE_POTION);
        potion.setLvl(8);
        potion.setAscii(("    ||    " + "   /██\\    " + "  \\██/    ").toCharArray());
        potion.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 4, 4, 0, 0, 0, 0,
                0, 0, 0, 0, 4, 4, 0, 0, 0, 0);
        return potion;
    }

    private Artifact createAttackPotionMid() {
        Artifact potion = new Artifact();
        potion.setName("Attack Potion");
        potion.setType(Artifact.TYPE_POTION);
        potion.setLvl(9);
        potion.setAscii(("    ||    " + "   /██\\    " + "  \\██/    ").toCharArray());
        potion.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 5, 5, 0, 0, 0, 0,
                0, 0, 0, 0, 5, 5, 0, 0, 0, 0);
        return potion;
    }

    private Artifact createDefensePotionMid() {
        Artifact potion = new Artifact();
        potion.setName("Defense Potion");
        potion.setType(Artifact.TYPE_POTION);
        potion.setLvl(10);
        potion.setAscii(("    ||    " + "   /██\\    " + "  \\██/    ").toCharArray());
        potion.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 3, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 3, 0, 0, 0, 0);
        return potion;
    }

    private Artifact createExperiencePotionMid() {
        Artifact potion = new Artifact();
        potion.setName("Experience Potion");
        potion.setType(Artifact.TYPE_POTION);
        potion.setLvl(10);
        potion.setAscii(("    ||    " + "   /██\\    " + "  \\██/    ").toCharArray());
        potion.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 2, 2, 0, 0, 0, 0,
                0, 0, 0, 0, 2, 2, 0, 0, 0, 0);
        return potion;
    }

    // Potions de haut niveau
    private Artifact createHealthPotionHigh() {
        Artifact potion = new Artifact();
        potion.setName("Greater Health Potion");
        potion.setType(Artifact.TYPE_POTION);
        potion.setLvl(16);
        potion.setAscii(("    ||    " + "   /██\\    " + " /████\\   ").toCharArray());
        potion.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
                0, 0, 0, 1, 1, 1, 1, 0, 0, 0);
        return potion;
    }

    private Artifact createManaPotionHigh() {
        Artifact potion = new Artifact();
        potion.setName("Greater Mana Potion");
        potion.setType(Artifact.TYPE_POTION);
        potion.setLvl(16);
        potion.setAscii(("    ||    " + "   /██\\    " + " /████\\   ").toCharArray());
        potion.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 4, 4, 0, 0, 0, 0,
                0, 0, 0, 4, 4, 4, 4, 0, 0, 0);
        return potion;
    }

    private Artifact createAttackPotionHigh() {
        Artifact potion = new Artifact();
        potion.setName("Greater Attack Potion");
        potion.setType(Artifact.TYPE_POTION);
        potion.setLvl(17);
        potion.setAscii(("    ||    " + "   /██\\    " + " /████\\   ").toCharArray());
        potion.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 5, 5, 0, 0, 0, 0,
                0, 0, 0, 5, 5, 5, 5, 0, 0, 0);
        return potion;
    }

    private Artifact createDefensePotionHigh() {
        Artifact potion = new Artifact();
        potion.setName("Greater Defense Potion");
        potion.setType(Artifact.TYPE_POTION);
        potion.setLvl(18);
        potion.setAscii(("    ||    " + "   /██\\    " + " /████\\   ").toCharArray());
        potion.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 3, 0, 0, 0, 0,
                0, 0, 0, 3, 3, 3, 3, 0, 0, 0);
        return potion;
    }

    private Artifact createExperiencePotionHigh() {
        Artifact potion = new Artifact();
        potion.setName("Greater Experience Potion");
        potion.setType(Artifact.TYPE_POTION);
        potion.setLvl(15);
        potion.setAscii(("    ||    " + "   /██\\    " + " /████\\   ").toCharArray());
        potion.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 2, 2, 0, 0, 0, 0,
                0, 0, 0, 2, 2, 2, 2, 0, 0, 0);
        return potion;
    }

    private Artifact createRingOfStrength() {
        Artifact ring = new Artifact();
        ring.setName("Ring of Strength");
        ring.setType(Artifact.TYPE_ACCESSORY);
        ring.setLvl(3);
        ring.setAscii(("          " + "  =<O>=      " + "          ").toCharArray());
        ring.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return ring;
    }

    private Artifact createRingOfProtection() {
        Artifact ring = new Artifact();
        ring.setName("Ring of Protection");
        ring.setType(Artifact.TYPE_ACCESSORY);
        ring.setLvl(5);
        ring.setAscii(("          " + "  =<O>=      " + "          ").toCharArray());
        ring.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return ring;
    }

    private Artifact createRingOfVitality() {
        Artifact ring = new Artifact();
        ring.setName("Ring of Vitality");
        ring.setType(Artifact.TYPE_ACCESSORY);
        ring.setLvl(10);
        ring.setAscii(("          " + "  =<●>=      " + "          ").toCharArray());
        ring.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return ring;
    }

    private Artifact createRingOfPower() {
        Artifact ring = new Artifact();
        ring.setName("Ring of Power");
        ring.setType(Artifact.TYPE_ACCESSORY);
        ring.setLvl(6);
        ring.setAscii(("          " + "  =<O>=      " + "          ").toCharArray());
        ring.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return ring;
    }

    private Artifact createRingOfPrecision() {
        Artifact ring = new Artifact();
        ring.setName("Ring of Precision");
        ring.setType(Artifact.TYPE_ACCESSORY);
        ring.setLvl(8);
        ring.setAscii(("          " + "  =<●>=      " + "          ").toCharArray());
        ring.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 5, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return ring;
    }

    private Artifact createRingOfEndurance() {
        Artifact ring = new Artifact();
        ring.setName("Ring of Endurance");
        ring.setType(Artifact.TYPE_ACCESSORY);
        ring.setLvl(9);
        ring.setAscii(("          " + "  =<●>=      " + "          ").toCharArray());
        ring.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return ring;
    }

    private Artifact createRingOfFortitude() {
        Artifact ring = new Artifact();
        ring.setName("Ring of Fortitude");
        ring.setType(Artifact.TYPE_ACCESSORY);
        ring.setLvl(11);
        ring.setAscii(("          " + "  =<●>=      " + "          ").toCharArray());
        ring.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return ring;
    }

    private Artifact createRingOfLuck() {
        Artifact ring = new Artifact();
        ring.setName("Ring of Luck");
        ring.setType(Artifact.TYPE_ACCESSORY);
        ring.setLvl(4);
        ring.setAscii(("          " + "  =<♣>=      " + "          ").toCharArray());
        ring.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return ring;
    }

    private Artifact createRingOfFire() {
        Artifact ring = new Artifact();
        ring.setName("Ring of Fire");
        ring.setType(Artifact.TYPE_ACCESSORY);
        ring.setLvl(13);
        ring.setAscii(("          " + "  =<●>=      " + "          ").toCharArray());
        ring.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return ring;
    }

    private Artifact createRingOfTheWarrior() {
        Artifact ring = new Artifact();
        ring.setName("Ring of the Warrior");
        ring.setType(Artifact.TYPE_ACCESSORY);
        ring.setLvl(14);
        ring.setAscii(("          " + "  =<●>=      " + "          ").toCharArray());
        ring.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 5, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return ring;
    }

    private Artifact createRingOfTheMage() {
        Artifact ring = new Artifact();
        ring.setName("Ring of the Mage");
        ring.setType(Artifact.TYPE_ACCESSORY);
        ring.setLvl(14);
        ring.setAscii(("          " + "  =<●>=      " + "          ").toCharArray());
        ring.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 5, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return ring;
    }

    private Artifact createRingOfShadows() {
        Artifact ring = new Artifact();
        ring.setName("Ring of Shadows");
        ring.setType(Artifact.TYPE_ACCESSORY);
        ring.setLvl(15);
        ring.setAscii(("          " + "  =<●>=      " + "          ").toCharArray());
        ring.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return ring;
    }

    private Artifact createRingOfResilience() {
        Artifact ring = new Artifact();
        ring.setName("Ring of Resilience");
        ring.setType(Artifact.TYPE_ACCESSORY);
        ring.setLvl(16);
        ring.setAscii(("          " + "  =[●]=      " + "          ").toCharArray());
        ring.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return ring;
    }

    private Artifact createRingOfFury() {
        Artifact ring = new Artifact();
        ring.setName("Ring of Fury");
        ring.setType(Artifact.TYPE_ACCESSORY);
        ring.setLvl(17);
        ring.setAscii(("          " + "  =[●]=      " + "          ").toCharArray());
        ring.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return ring;
    }

    private Artifact createRingOfThePhoenix() {
        Artifact ring = new Artifact();
        ring.setName("Ring of the Phoenix");
        ring.setType(Artifact.TYPE_ACCESSORY);
        ring.setLvl(18);
        ring.setAscii(("          " + "  =[●]=      " + "          ").toCharArray());
        ring.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return ring;
    }

    private Artifact createRingOfMastery() {
        Artifact ring = new Artifact();
        ring.setName("Ring of Mastery");
        ring.setType(Artifact.TYPE_ACCESSORY);
        ring.setLvl(20);
        ring.setAscii(("          " + "  =[●]=      " + "          ").toCharArray());
        ring.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 4, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return ring;
    }

    //Amulet
    private Artifact createAmuletOfPower() {
        Artifact amulet = new Artifact();
        amulet.setName("Amulet of Power");
        amulet.setType(Artifact.TYPE_ACCESSORY);
        amulet.setLvl(5);
        amulet.setAscii((" ┌──────┐ " + " │ oOOo │ " + " └──────┘ ").toCharArray());
        amulet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1, 1, 1, 1, 1, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return amulet;
    }

    private Artifact createAmuletOfRegeneration() {
        Artifact amulet = new Artifact();
        amulet.setName("Amulet of Regeneration");
        amulet.setType(Artifact.TYPE_ACCESSORY);
        amulet.setLvl(9);
        amulet.setAscii((" ┌──────┐ " + " │ +♥♥+ │ " + " └──────┘ ").toCharArray());
        amulet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 2, 1, 1, 2, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return amulet;
    }

    private Artifact createAmuletOfShielding() {
        Artifact amulet = new Artifact();
        amulet.setName("Amulet of Shielding");
        amulet.setType(Artifact.TYPE_ACCESSORY);
        amulet.setLvl(12);
        amulet.setAscii((" ┌──────┐ " + " │ ████ │ " + " └──────┘ ").toCharArray());
        amulet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 6, 6, 6, 6, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return amulet;
    }

    private Artifact createAmuletOfFortitude() {
        Artifact amulet = new Artifact();
        amulet.setName("Amulet of Fortitude");
        amulet.setType(Artifact.TYPE_ACCESSORY);
        amulet.setLvl(6);
        amulet.setAscii((" ┌──────┐ " + " │  ██  │ " + " └──────┘ ").toCharArray());
        amulet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return amulet;
    }


    private Artifact createAmuletOfSpirit() {
        Artifact amulet = new Artifact();
        amulet.setName("Amulet of Spirit");
        amulet.setType(Artifact.TYPE_ACCESSORY);
        amulet.setLvl(15);
        amulet.setAscii((" ┌──────┐ " + " │ <==> │ " + " └──────┘ ").toCharArray());
        amulet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 3, 2, 2, 3, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return amulet;
    }

    private Artifact createAmuletOfTheBerserker() {
        Artifact amulet = new Artifact();
        amulet.setName("Amulet of the Berserker");
        amulet.setType(Artifact.TYPE_ACCESSORY);
        amulet.setLvl(16);
        amulet.setAscii((" ┌──────┐ " + " │ <██> │ " + " └──────┘ ").toCharArray());
        amulet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 5, 1, 1, 5, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return amulet;
    }

    private Artifact createAmuletOfTheTitan() {
        Artifact amulet = new Artifact();
        amulet.setName("Amulet of the Titan");
        amulet.setType(Artifact.TYPE_ACCESSORY);
        amulet.setLvl(17);
        amulet.setAscii((" ┌──────┐ " + " │ >██< │ " + " └──────┘ ").toCharArray());
        amulet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1, 5, 5, 1, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return amulet;
    }

    private Artifact createAmuletOfVitality() {
        Artifact amulet = new Artifact();
        amulet.setName("Amulet of Vitality");
        amulet.setType(Artifact.TYPE_ACCESSORY);
        amulet.setLvl(18);
        amulet.setAscii((" ┌──────┐ " + " │ ♡♥♥♡ │ " + " └──────┘ ").toCharArray());
        amulet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return amulet;
    }

    private Artifact createAmuletOfMagicShield() {
        Artifact amulet = new Artifact();
        amulet.setName("Amulet of Magic Shield");
        amulet.setType(Artifact.TYPE_ACCESSORY);
        amulet.setLvl(20);
        amulet.setAscii((" ┌──────┐ " + " │ [][] │ " + " └──────┘ ").toCharArray());
        amulet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 4, 4, 4, 4, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return amulet;
    }

    private Artifact createAmuletOfResilience() {
        Artifact amulet = new Artifact();
        amulet.setName("Amulet of Resilience");
        amulet.setType(Artifact.TYPE_ACCESSORY);
        amulet.setLvl(19);
        amulet.setAscii((" ┌──────┐ " + " │ [██] │ " + " └──────┘ ").toCharArray());
        amulet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 3, 2, 2, 3, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return amulet;
    }

    private Artifact createAmuletOfShadows() {
        Artifact amulet = new Artifact();
        amulet.setName("Amulet of Shadows");
        amulet.setType(Artifact.TYPE_ACCESSORY);
        amulet.setLvl(14);
        amulet.setAscii((" ┌──────┐ " + " │ ░░░░ │ " + " └──────┘ ").toCharArray());
        amulet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 5, 5, 5, 5, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return amulet;
    }


    private Artifact createAmuletOfMastery() {
        Artifact amulet = new Artifact();
        amulet.setName("Amulet of Mastery");
        amulet.setType(Artifact.TYPE_ACCESSORY);
        amulet.setLvl(20);
        amulet.setAscii((" ┌──────┐ " + " │ /\\/\\ │ " + " └──────┘ ").toCharArray());
        amulet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 6, 6, 6, 6, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return amulet;
    }

    private Artifact createAmuletOfEndurance() {
        Artifact amulet = new Artifact();
        amulet.setName("Amulet of Endurance");
        amulet.setType(Artifact.TYPE_ACCESSORY);
        amulet.setLvl(8);
        amulet.setAscii((" ┌──────┐ " + " │ =<>= │ " + " └──────┘ ").toCharArray());
        amulet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 4, 4, 4, 4, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return amulet;
    }


    //Bracelet
    private Artifact createBraceletOfAgility() {
        Artifact bracelet = new Artifact();
        bracelet.setName("Bracelet of Agility");
        bracelet.setType(Artifact.TYPE_ACCESSORY);
        bracelet.setLvl(4);
        bracelet.setAscii(("   /--\\   " + "==< <> >==" + "   \\--/   ").toCharArray());
        bracelet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 4, 4, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return bracelet;
    }

    private Artifact createBraceletOfStrength() {
        Artifact bracelet = new Artifact();
        bracelet.setName("Bracelet of Strength");
        bracelet.setType(Artifact.TYPE_ACCESSORY);
        bracelet.setLvl(6);
        bracelet.setAscii(("   /--\\   " + "==< ██ >==" + "   \\--/   ").toCharArray());
        bracelet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return bracelet;
    }

    private Artifact createBraceletOfEndurance() {
        Artifact bracelet = new Artifact();
        bracelet.setName("Bracelet of Endurance");
        bracelet.setType(Artifact.TYPE_ACCESSORY);
        bracelet.setLvl(8);
        bracelet.setAscii(("   /--\\   " + "==< ▀▄ >==" + "   \\--/   ").toCharArray());
        bracelet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 6, 6, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return bracelet;
    }

    private Artifact createBraceletOfFortitude() {
        Artifact bracelet = new Artifact();
        bracelet.setName("Bracelet of Fortitude");
        bracelet.setType(Artifact.TYPE_ACCESSORY);
        bracelet.setLvl(5);
        bracelet.setAscii(("   /--\\   " + "==< ▐▌ >==" + "   \\--/   ").toCharArray());
        bracelet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 2, 2, 2, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return bracelet;
    }

    private Artifact createBraceletOfDefense() {
        Artifact bracelet = new Artifact();
        bracelet.setName("Bracelet of Defense");
        bracelet.setType(Artifact.TYPE_ACCESSORY);
        bracelet.setLvl(9);
        bracelet.setAscii(("   /--\\   " + "==< ][ >==" + "   \\--/   ").toCharArray());
        bracelet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 4, 4, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return bracelet;
    }

    private Artifact createBraceletOfMagicDefense() {
        Artifact bracelet = new Artifact();
        bracelet.setName("Bracelet of Magic Defense");
        bracelet.setType(Artifact.TYPE_ACCESSORY);
        bracelet.setLvl(10);
        bracelet.setAscii(("   /--\\   " + "==< /\\ >==" + "   \\--/   ").toCharArray());
        bracelet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 4, 4, 4, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return bracelet;
    }


    private Artifact createBraceletOfEnergy() {
        Artifact bracelet = new Artifact();
        bracelet.setName("Bracelet of Energy");
        bracelet.setType(Artifact.TYPE_ACCESSORY);
        bracelet.setLvl(10);
        bracelet.setAscii(("   /--\\   " + "==< () >==" + "   \\--/   ").toCharArray());
        bracelet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return bracelet;
    }

    private Artifact createBraceletOfMana() {
        Artifact bracelet = new Artifact();
        bracelet.setName("Bracelet of Mana");
        bracelet.setType(Artifact.TYPE_ACCESSORY);
        bracelet.setLvl(11);
        bracelet.setAscii(("   /--\\   " + "==< || >==" + "   \\--/   ").toCharArray());
        bracelet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 4, 4, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return bracelet;
    }

    private Artifact createBraceletOfProtection() {
        Artifact bracelet = new Artifact();
        bracelet.setName("Bracelet of Protection");
        bracelet.setType(Artifact.TYPE_ACCESSORY);
        bracelet.setLvl(16);
        bracelet.setAscii(("   /--\\   " + "==< XX >==" + "   \\--/   ").toCharArray());
        bracelet.setAscii_color(
                7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                7, 7, 7, 7, 4, 4, 7, 7, 7, 7,
                7, 7, 7, 7, 7, 7, 7, 7, 7, 7);
        return bracelet;
    }

    private Artifact createBraceletOfTheBerserker() {
        Artifact bracelet = new Artifact();
        bracelet.setName("Bracelet of the Berserker");
        bracelet.setType(Artifact.TYPE_ACCESSORY);
        bracelet.setLvl(17);
        bracelet.setAscii(("   /--\\   " + "==< ▌▐ >==" + "   \\--/   ").toCharArray());
        bracelet.setAscii_color(
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 1, 1, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5);
        return bracelet;
    }

    private Artifact createBraceletOfRegeneration() {
        Artifact bracelet = new Artifact();
        bracelet.setName("Bracelet of Regeneration");
        bracelet.setType(Artifact.TYPE_ACCESSORY);
        bracelet.setLvl(18);
        bracelet.setAscii(("   /--\\   " + "==< ♥♥ >==" + "   \\--/   ").toCharArray());
        bracelet.setAscii_color(
                6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
                6, 6, 6, 6, 1, 1, 6, 6, 6, 6,
                6, 6, 6, 6, 6, 6, 6, 6, 6, 6);
        return bracelet;
    }

    private Artifact createBraceletOfMastery() {
        Artifact bracelet = new Artifact();
        bracelet.setName("Bracelet of Mastery");
        bracelet.setType(Artifact.TYPE_ACCESSORY);
        bracelet.setLvl(19);
        bracelet.setAscii(("   /--\\   " + "==< ♦♦ >==" + "   \\--/   ").toCharArray());
        bracelet.setAscii_color(
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                2, 2, 2, 2, 5, 5, 2, 2, 2, 2,
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2);
        return bracelet;
    }

    private Artifact createBraceletOfTheTitan() {
        Artifact bracelet = new Artifact();
        bracelet.setName("Bracelet of the Titan");
        bracelet.setType(Artifact.TYPE_ACCESSORY);
        bracelet.setLvl(20);
        bracelet.setAscii(("   /--\\   " + "==<▐██▌>==" + "   \\--/   ").toCharArray());
        bracelet.setAscii_color(
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                3, 3, 3, 1, 1, 1, 1, 3, 3, 3,
                3, 3, 3, 3, 3, 3, 3, 3, 3, 3);
        return bracelet;
    }

    private Artifact createBraceletOfAttackBoost() {
        Artifact bracelet = new Artifact();
        bracelet.setName("Bracelet of Attack Boost");
        bracelet.setType(Artifact.TYPE_ACCESSORY);
        bracelet.setLvl(11);
        bracelet.setAscii(("   /--\\   " + "==< -> >==" + "   \\--/   ").toCharArray());
        bracelet.setAscii_color(
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 3, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        return bracelet;
    }



}
=== ./View/Block_Victory.java ===
package org.plefevre.View;

import org.plefevre.Artifact;
import org.plefevre.Game;
import org.plefevre.Input;

import java.util.ArrayList;

import static org.plefevre.View.Block_Inventaire.HEIGHT_CASE;
import static org.plefevre.View.Block_Inventaire.WIDTH_CASE;

public class Block_Victory extends BlockRPG {
    public ArrayList<Artifact> artifacts;
    int selected = 0;
    int xp = 0;

    public Block_Victory() {
        this(0, 0, 100, 24);
    }


    public Block_Victory(int x, int y, int w, int h) {
        super(x, y, w, h);

        rx = x;
        ry = y;
        rw = w;
        rh = h;

        useColor = true;
        focus = true;
    }

    @Override
    public char[][] draw() {

        buffer = new char[rh][rw];
        color = new byte[rh][rw];

        drawCadre("Defeat ");
        fillColor(color, 0, 0, rw, rh, (byte) -25);

        if (focus) gestionFocus();


        drawAscii(buffer,
                "▗▖  ▗▖▗▄▄▄▖ ▗▄▄▖▗▄▄▄▖▗▄▖ ▗▄▄▖▗▖  ▗▖\n" +
                        "▐▌  ▐▌  █  ▐▌     █ ▐▌ ▐▌▐▌ ▐▌▝▚▞▘ \n" +
                        "▐▌  ▐▌  █  ▐▌     █ ▐▌ ▐▌▐▛▀▚▖ ▐▌  \n" +
                        " ▝▚▞▘ ▗▄█▄▖▝▚▄▄▖  █ ▝▚▄▞▘▐▌ ▐▌ ▐▌  ", (rw - 35) / 2, 3);

        String msg = "Congratulation, you won " + xp + " xp and";
        setTextAt(buffer, msg, (rw - msg.length()) / 2, 8);

        drawBorder(buffer, null, rw / 2 - 20, 10, WIDTH_CASE, HEIGHT_CASE);
        drawBorder(buffer, null, rw / 2 + 10, 10, WIDTH_CASE, HEIGHT_CASE);

        if (!artifacts.isEmpty()) {
            drawChar(buffer, artifacts.get(0).getAscii(), rw / 2 - 20 + 1, 11, WIDTH_CASE - 2);
            String name = artifacts.get(0).getName();
            if (name.length() > WIDTH_CASE - 2)
                name = name.substring(0, WIDTH_CASE - 4) + "..";

            setTextAt(buffer, name, rw / 2 - 20 + 1, 15);
        }
        if (artifacts.size() >= 2) {
            drawChar(buffer, artifacts.get(1).getAscii(), rw / 2 + 11, 11, WIDTH_CASE - 2);
            String name = artifacts.get(1).getName();
            if (name.length() > WIDTH_CASE - 2)
                name = name.substring(0, WIDTH_CASE - 4) + "..";

            setTextAt(buffer, name, rw / 2 + 10 + 1, 15);
        }

        drawButton(buffer, color, rw / 2 - 6, 19, 12, "Continue", (byte) -65);

        return buffer;
    }

    private void gestionFocus() {
        Input input = Game.game.input;
        input.setListen_tap(false);
        input.setListen_x(0);
        input.setListen_y(Game.game.getRpgInterface().getH());

        if (input.getTouch() == 3) selected++;
        if (input.getTouch() == 4) selected--;
        if (input.getTouch() == 5) {
            Game.game.getRpgInterface().setModal(null);
            input.reload();
        }
    }
}=== ./View/Block_Hero.java ===
package org.plefevre.View;

import org.plefevre.Game;
import org.plefevre.Model.Hero;
import org.plefevre.Smiley;

import java.util.Arrays;

public class Block_Hero extends BlockRPG {

    public Block_Hero(int x, int y, int w, int h) {
        super(x, y, w, h);

        useColor = true;
    }

    @Override
    public char[][] draw() {
        Hero hero = Game.game.getHero();
        buffer = new char[rh][rw];
        color = new byte[rh][rw];

        if (rh < 20 || rw < 30) return buffer;

        drawCadre("Hero " + hero.getName() + " ");
        if (focus) setBorderColor(0, 0, rw, rh, (byte) 2);

        String asciiArt = hero.getAsciiArt();

        int sx = 2;
        int sy = 2;

        int x = sx;
        int y = sy;

        drawAscii(buffer, asciiArt, sx, sy);

        sx = 18;
        y = sy;

        for (String s : Arrays.asList("Name", "Class", "Attack", "Defense", "Hit Points")) {
            setColor(color, (byte) -100, sx, y, 16);
            setColor(color, (byte) 2, sx + 16, y, 16);
            buffer[y][sx + 15] = ':';
            setTextAt(buffer, s, sx, y++);
        }
        setTextAt(buffer, hero.getName(), sx + 17, sy);
        setTextAt(buffer, hero.getClassName(), sx + 17, sy + 1);

        setSmiley(buffer, Smiley.SMILEY_SWORD, sx + 17, sy + 2, hero.getAttack());
        setSmiley(buffer, Smiley.SMILEY_SHIELD, sx + 17, sy + 3, hero.getDefense());
        setSmiley(buffer, Smiley.SMILEY_HEART, sx + 17, sy + 4, hero.getHit_point());

        int effAtt = hero.getEffectAtt();
        int effDef = hero.getEffectDef();

        setSmiley(buffer, Smiley.SMILEY_SWORD, sx + 17 + hero.getAttack() + 1, sy + 2, effAtt);
        setSmiley(buffer, Smiley.SMILEY_SHIELD, sx + 17 + hero.getDefense() + 1, sy + 3, effDef);


        y += 3;
        if (y > rh) return buffer;

        int rightBorder = rw - 4;
        int len = rw - 7;
        for (int i = 3; i < rightBorder; i++) buffer[y][i] = (i < 5) ? '<' : (i > len) ? '>' : '-';

        String lvl = "==<< " + hero.getLvl() + " >>==";
        setTextAt(buffer, lvl, (rw - lvl.length()) / 2, y);

        setColor(color, (byte) 3, 3, y, len);
        setColor(color, (byte) -3, (rw - lvl.length()) / 2, y, lvl.length());


        y += 2;
        if (y > rh) return buffer;

        //Draw bar xp
        String xp = hero.getExperience() + " xp";
        setTextAt(buffer, xp, (rw - xp.length()) / 2, y);
        int len_bar_xp = (len * hero.getExperience()) / hero.xpToEndLvl();
        setColor(color, (byte) -18, 3, y, len_bar_xp);
        setColor(color, (byte) -63, len_bar_xp + 3, y, len - len_bar_xp);
        y += 2;

        //Draw bar pv
        String pv = hero.getPv() + " / " + hero.getMaxPV() + " PV";
        setTextAt(buffer, pv, (rw - pv.length()) / 2, y);
        int len_bar_pv = (len * hero.getPv()) / hero.getMaxPV();
        setColor(color, (byte) -9, 3, y, len_bar_pv);
        setColor(color, (byte) -63, len_bar_pv + 3, y, len - len_bar_pv);
        y += 2;

        //Draw bar mana
        String mana = hero.getMana() + " / " + hero.getMaxMana() + " Mana";
        setTextAt(buffer, mana, (rw - mana.length()) / 2, y);
        int len_bar_mana = (len * hero.getMana()) / hero.getMaxMana();
        setColor(color, (byte) -54, 3, y, len_bar_mana);
        setColor(color, (byte) -63, len_bar_mana + 3, y, len - len_bar_mana);

        y += 3;

        sx = 3;
        sy = y;

        for (String s : Arrays.asList("Current Weapon", "Current Armor", "Current Helm")) {
            setColor(color, (byte) -100, sx, y, 20);
            setColor(color, (byte) 2, sx + 20, y, 20);
            if (y >= 0 && y < buffer.length && (sx+19) < buffer[y].length)
                buffer[y][sx + 19] = ':';
            setTextAt(buffer, s, sx, y++);
        }

        String str_weapon = hero.getCurrent_weapon() != null ? hero.getCurrent_weapon().getNameEffect() : "None";
        String str_armor = (hero.getCurrent_armor() != null ? hero.getCurrent_armor().getNameEffect() : "None");
        String str_helm = (hero.getCurrent_helm() != null ? hero.getCurrent_helm().getNameEffect() : "None");


        setTextAt(buffer, str_weapon, sx + 21, sy);
        setTextAt(buffer, str_armor, sx + 21, sy + 1);
        setTextAt(buffer, str_helm, sx + 21, sy + 2);

        if (str_weapon.contains("(")) setColor(color, (byte) -5, sx + 20 + str_weapon.indexOf('('), sy, 10);
        if (str_armor.contains("(")) setColor(color, (byte) -5, sx + 20 + str_armor.indexOf('('), sy + 1, 10);
        if (str_helm.contains("(")) setColor(color, (byte) -5, sx + 20 + str_helm.indexOf('('), sy + 2, 10);

        return buffer;
    }

    @Override
    public boolean isFocusable() {
        return false;
    }
}
=== ./View/Block_Log.java ===
package org.plefevre.View;

import org.plefevre.Artifact;
import org.plefevre.Game;
import org.plefevre.Model.Hero;

import java.util.ArrayList;
import java.util.Arrays;

import static java.lang.Math.max;
import static java.lang.Math.min;

public class Block_Log extends BlockRPG {
    public Block_Log(int x, int y, int w, int h) {
        super(x, y, w, h);
        useColor = true;
    }


    ArrayList<String> output = new ArrayList<>();
    ArrayList<byte[]> colors = new ArrayList<>();

    @Override
    public char[][] draw() {

        buffer = new char[rh][rw];
        color = new byte[rh][rw];

        drawCadre("Log ");
        if (focus) {
            setBorderColor(0, 0, rw, rh, (byte) 2);
            gestionFocus();
        }

        int nbToPrint = min(output.size(), rh - 2 - 2);

        for (int i = 0; i < nbToPrint; i++) {
            int id = output.size() - nbToPrint + i;
            setTextAt(buffer, output.get(id), 2, 1 + i);
            setColor(color, colors.get(id), 2, 1 + i);
        }

        return buffer;
    }

    private void gestionFocus() {
        if (Game.game.input.isEnter() && !Game.game.input.getText().isEmpty()) interprete(Game.game.input.getText());

        int y = 2;

        y += output.size();
        if (y > rh - 1)
            y = rh - 1;

        Game.game.input.setListen_x(rx + 2);
        Game.game.input.setListen_y(ry + y);
        Game.game.input.setListen_tap(true);


    }

    public void interprete(String text) {
        Game game = Game.game;
        if (text.isEmpty())
            return;

        addTextColor(text, (byte) 3);
        text = text.toLowerCase();

        if (text.equals("exit") || text.equals("quit")) System.exit(0);
        else {
            boolean redraw = true;
            if (text.equals("down") || text.equals("d")) game.moveHero(0, 1);
            else if (text.equals("up") || text.equals("u")) game.moveHero(0, -1);
            else if (text.equals("right") || text.equals("r")) game.moveHero(1, 0);
            else if (text.equals("left") || text.equals("l")) game.moveHero(-1, 0);
            else if (text.equals("help") || text.equals("h")) showHelp();
            else if (text.startsWith("show")) command_show(text);
            else if (text.startsWith("equip")) command_equip(text);
            else if (text.startsWith("unequip")) command_unequip(text);
            else if (text.startsWith("throw")) command_throw(text);
            else if (text.startsWith("use")) command_use(text);
            else if (text.startsWith("dimension")) addSimpleText(game.getRpgInterface().getH() + " * " + game.getRpgInterface().getW());
            else {
                redraw = false;
                addTextColorWord("Command not found, try 'help'", "1 1 1 1 -1");
            }

            if (redraw) {
                Game.game.input.setText("");
                Game.game.setRedraw(true);
            }
        }

        //todo : -Modal (fight, victory, defeat, lvlComplete)
        //
    }

    public void command_equip(String text) {
        Game game = Game.game;

        String[] tt = text.split(" ");
        if (tt.length != 2)
            addTextColorWord("Usage: equip id_inventory", "1 -1 -1");
        else {
            try {
                int id = Integer.parseInt(tt[1]);

                if (id < 0 || id >= Hero.INVENTORY_SIZE)
                    addTextColor("Outside index", (byte) 1);
                else {
                    Artifact artifact = game.getHero().getInventory(id);
                    if (artifact == null || (artifact.getType() != Artifact.TYPE_WEAPON && artifact.getType() != Artifact.TYPE_ARMOR & artifact.getType() != Artifact.TYPE_HELM))
                        addTextColor("No armor/weapon at this index", (byte) 1);
                    else if (artifact.getLvl() > game.getHero().getLvl())
                        addTextColor("Level too hight", (byte) 1);
                    else game.getHero().equip(id);
                }

            } catch (NumberFormatException e) {
                addTextColor("Not a number", (byte) 1);
            }
        }
    }

    public void command_use(String text) {
        Game game = Game.game;

        String[] tt = text.split(" ");
        if (tt.length != 2)
            addTextColorWord("Usage: use id_inventory", "1 -1 -1");
        else {
            try {
                int id = Integer.parseInt(tt[1]);

                if (id < 0 || id >= Hero.INVENTORY_SIZE)
                    addTextColor("Outside index", (byte) 1);
                else {
                    Artifact artifact = game.getHero().getInventory(id);
                    if (artifact == null || (artifact.getType() != Artifact.TYPE_POTION))
                        addTextColor("No potion at this index", (byte) 1);
                    else if (artifact.getLvl() > game.getHero().getLvl())
                        addTextColor("Level too hight", (byte) 1);
                    else game.getHero().use(id);
                }

            } catch (NumberFormatException e) {
                addTextColor("Not a number", (byte) 1);
            }
        }
    }

    public void command_throw(String text) {
        Game game = Game.game;

        String[] tt = text.split(" ");
        if (tt.length != 2)
            addTextColorWord("Usage: throw id_inventory", "1 -1 -1");
        else {
            try {
                int id = Integer.parseInt(tt[1]);

                if (id < 0 || id >= Hero.INVENTORY_SIZE)
                    addTextColor("Outside index", (byte) 1);
                else {
                    Artifact artifact = game.getHero().getInventory(id);
                    if (artifact == null)
                        addTextColor("No item at this index", (byte) 1);
                    else game.getHero().throwE(id);
                }

            } catch (NumberFormatException e) {
                addTextColor("Not a number", (byte) 1);
            }
        }
    }

    public void command_unequip(String text) {
        Game game = Game.game;

        String[] tt = text.split(" ");
        if (tt.length != 2)
            addTextColorWord("Usage: unequip weapon|armor|helm", "1 -1 -1");
        else {
            String type = tt[1].toLowerCase();

            int type_int = 0;
            if (type.equals("weapon")) type_int = Artifact.TYPE_WEAPON;
            if (type.equals("armor")) type_int = Artifact.TYPE_ARMOR;
            if (type.equals("helm")) type_int = Artifact.TYPE_HELM;

            if (type_int == 0)
                addTextColor("Type not recognized", (byte) 1);
            else if (game.getHero().getNbFreeInventory() == 0)
                addTextColor("No space left", (byte) 1);
            else {
                game.getHero().unequip(type_int, -1);
            }


        }
    }

    public void command_show(String text) {
        Game game = Game.game;

        String[] tt = text.split(" ");
        if (tt.length != 2)
            addTextColorWord("Usage: show id_inventory", "1 -1 -1");
        else {
            try {
                int id = Integer.parseInt(tt[1]);

                if (id < 0 || id >= Hero.INVENTORY_SIZE)
                    addTextColor("Outside index", (byte) 1);
                else {
                    Artifact artifact = game.getHero().getInventory(id);
                    if (artifact == null)
                        addTextColor("No artifact at this index", (byte) 1);
                    else {
                        String s = artifact.getStringLog();
                        String[] ss = s.split("\n");
                        for (int i = 0; i < ss.length; i++) {
                            addTextColor(ss[i], (byte) 6);
                        }
                    }
                }

            } catch (NumberFormatException e) {
                addTextColor("Not a number", (byte) 1);
            }
        }
    }

    public void addSimpleText(String txt) {
        addTextColor(txt, (byte) 0);
    }

    public void addTextColor(String txt, byte col) {
        byte[] arr = new byte[txt.length()];

        Arrays.fill(arr, col);

        output.add(txt);
        colors.add(arr);
    }

    public void addTextColorWord(String txt, String col) {
        byte[] arr = new byte[txt.length()];
        Arrays.fill(arr, (byte) 0);

        String[] cols = col.split(" ");
        int id = 0;
        byte curColor;

        curColor = Byte.parseByte(cols[id]);
        for (int i = 0; i < txt.length(); i++) {
            arr[i] = curColor;
            if (txt.charAt(i) == ' ' && i > 0 && txt.charAt(i - 1) != ' ') {
                id++;
                if (id < cols.length)
                    curColor = Byte.parseByte(cols[id]);
            }
        }

        output.add(txt);
        colors.add(arr);

    }

    public void showHelp() {

    }
}
=== ./View/BlockRPG.java ===
package org.plefevre.View;

import java.util.ArrayList;

public class BlockRPG {
    int x;
    int y;
    int w;
    int h;

    int rw;
    int rh;
    int rx;
    int ry;

    boolean useColor = false;
    char[][] buffer;
    byte[][] color;

    public boolean focus = false;

    public BlockRPG(int x, int y, int w, int h) {
        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
    }

    public void update(int w, int h, int x, int y) {
        rw = w;
        rh = h;
        rx = x;
        ry = y;
    }

    public char[][] draw() {
        buffer = new char[rh][rw];
        color = new byte[rh][rw];
        String str = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";//░█▒ *.";
        char c = str.charAt((int) (Math.random() * str.length()));
        c = str.charAt(x * 3 + y);
        drawCadre("Test [" + x + ";" + y + "]");

        for (int i = 1; i < rh - 1; i++) {
            for (int j = 1; j < rw - 1; j++) {
                buffer[i][j] = c;
            }
        }

        return buffer;
    }

    protected void drawCadre(String name) {
        drawBorder(buffer, color, 0, 0, rw, rh);
        setTextAt(buffer, name, 3, 0);
    }

    public byte[][] color() {
        if (useColor)
            return color;
        return null;
    }

    public static void sort(ArrayList<BlockRPG> blocks) {
        blocks.sort((b1, b2) -> {
            if (b1.y != b2.y) return Integer.compare(b1.y, b2.y);
            return Integer.compare(b1.x, b2.x);
        });
    }

    @Override
    public String toString() {
        return "\tx: " + x + "\ty: " + y + "\tw: " + w + "\th: " + h;
    }

    public static void setTextAt(char[][] buf, String s, int x, int y) {
        if (y < 0 || y >= buf.length)
            return;
        for (int i = 0; i < s.length(); i++)
            if (x + i >= 0 && x + i < buf[y].length)
                buf[y][x + i] = s.charAt(i);
    }

    public static void setColor(byte[][] buf, byte color, int x, int y, int len) {
        if (x < 0 || y < 0 || y >= buf.length || x + len >= buf[y].length)
            return;
        for (int i = 0; i < len; i++) buf[y][x + i] = color;
    }

    public static void setColor(byte[][] buf, byte[] color, int x, int y) {
        if (x < 0 || y < 0 || y >= buf.length || x + color.length >= buf[y].length)
            return;
        for (int i = 0; i < color.length; i++) buf[y][x + i] = color[i];
    }


    public static void setSmiley(char[][] buf, char smil, int x, int y, int len) {
        for (int i = 0; i < len; i++)
            if (x >= 0 && y >= 0 && y < buf.length && (x + i) < buf[y].length)
                buf[y][x + i] = smil;
    }

    public static void drawButton(char[][] buf, byte[][] col, int x, int y, int w, String s, byte color) {
        drawBorder(buf, col, x, y, w, 3);
        fillColor(col, x, y, w, 3, color);
        setTextAt(buf, s, x + (w - s.length()) / 2, y + 1);
    }

    public static void drawChar(char[][] buf, char[] draw, int x, int y, int len_line) {
        int nb_line = (int) Math.ceil(1.0f * draw.length / len_line);
        for (int i = 0; i < nb_line; i++) {
            for (int j = 0; j < len_line; j++) {
                int ind = i * len_line + j;
                if (ind >= draw.length)
                    return;
                buf[y + i][x + j] = draw[ind];
            }
        }
    }

    public static void drawColor(byte[][] buf, byte[] draw, int x, int y, int len_line) {
        int nb_line = (int) Math.ceil(1.0f * draw.length / len_line);
        for (int i = 0; i < nb_line; i++) {
            for (int j = 0; j < len_line; j++) {
                int ind = i * len_line + j;
                if (ind >= draw.length)
                    return;
                buf[y + i][x + j] = draw[ind];
            }
        }
    }

    public void setBorderColor(int x, int y, int w, int h, byte c) {
        if (x < 0 || y < 0 || y + h > rh || x + w > rw)
            return;
        for (int i = x + 1; i < x + w; i++) {
            color[y][i] = c;
            color[y + h - 1][i] = c;
        }
        for (int i = y; i < y + h; i++) {
            color[i][x] = c;
            color[i][x + w - 1] = c;
        }
    }

    public static void fillColor(byte[][] color, int x, int y, int w, int h, byte c) {
        if (x < 0 || y < 0 || y + h > color.length || x + w > color[0].length)
            return;
        for (int i = x; i < x + w; i++) {
            for (int j = y; j < y + h; j++) {
                color[j][i] = c;
            }
        }
    }

    public static void drawAscii(char[][] buffer, String s, int sx, int y) {
        int x = sx;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '\n') {
                x = sx;
                y++;
            } else {
                if (y >= 0 && y < buffer.length && x >= 0 && x < buffer[0].length)
                    buffer[y][x] = c;
                x++;
            }
        }

    }


    public static void drawBorder(char[][] buffer, byte[][] color, int x, int y, int w, int h) {
        if (x < 0 || y < 0 || y + h > buffer.length || x + w > buffer[0].length)
            return;

        buffer[y][x] = '┌';
        buffer[y][x + w - 1] = '┐';
        buffer[y + h - 1][x + w - 1] = '┘';
        buffer[y + h - 1][x] = '└';

        for (int i = x + 1; i < x + w - 1; i++) {
            buffer[y][i] = '─';
            buffer[y + h - 1][i] = '─';
        }
        for (int i = y + 1; i < y + h - 1; i++) {
            buffer[i][x] = '│';
            buffer[i][x + w - 1] = '│';
        }

        if (color != null) {
            for (int i = x; i < x + w; i++) {
                color[y][i] = 0;
                color[y + h - 1][i] = 0;
            }
            for (int i = y; i < y + h; i++) {
                color[i][x] = 0;
                color[i][x + w - 1] = 0;
            }
        }
    }

    public boolean isFocusable() {
        return true;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    public int getW() {
        return w;
    }

    public int getH() {
        return h;
    }

    public int getRw() {
        return rw;
    }

    public int getRh() {
        return rh;
    }

    public int getRx() {
        return rx;
    }

    public int getRy() {
        return ry;
    }
}
=== ./View/Block_All_Artifact.java ===
package org.plefevre.View;

import org.plefevre.Artifact;
import org.plefevre.ArtifactLibrary;

import java.util.List;

import static org.plefevre.View.Block_Inventaire.HEIGHT_CASE;
import static org.plefevre.View.Block_Inventaire.WIDTH_CASE;

public class Block_All_Artifact extends BlockRPG {
    public Block_All_Artifact(int x, int y, int w, int h) {
        super(x, y, w, h);

        useColor = true;
    }


    public char[][] draw() {
        buffer = new char[rh][rw];
        color = new byte[rh][rw];

        List<Artifact> artifacts = ArtifactLibrary.artifactLibrary.getAllArtifacts();

        drawCadre("All artifacts (" + artifacts.size() + ")");
/*
        for (int i = 0; i < 30; i++) {
            buffer[i+1][4] = (char) (i + '0');
            buffer[i+1][8] = (char) (Smiley.width_smile[i+1] + '0');
            buffer[i+1][10] = (char) (i+1);
            buffer[i+1][20] = '|';
        }

        if(true)
            return buffer;
*/
        int nbCase_per_line = (rw - 4) / WIDTH_CASE;
        for (int i = 0; i < artifacts.size() ; i++) {
            Artifact artifact = artifacts.get(i);
            int x = (i % nbCase_per_line) * WIDTH_CASE;
            int y = (i / nbCase_per_line) * HEIGHT_CASE;

            char[] ascii = artifact.getAscii();
            byte[] colorii = artifact.getAscii_color();

            drawChar(buffer, ascii, x + 3, y + 3, WIDTH_CASE - 2);
            drawColor(color, colorii, x + 3, y + 3, WIDTH_CASE - 2);

            drawBorder(buffer, color,x + 2, y + 2, WIDTH_CASE, HEIGHT_CASE);

            int color = 2;
            if(artifact.getLvl()>14)
                color = 6;
            else if(artifact.getLvl()>7)
                color = 3;

            setBorderColor(x + 2, y + 2, WIDTH_CASE, HEIGHT_CASE, (byte) color);

            String name = artifact.getName();
            if(name.length()> WIDTH_CASE -2)
                name = name.substring(0, WIDTH_CASE -4)+"..";

            setTextAt(buffer, name,x+3,y+7);
        }

        return buffer;
    }


}
=== ./View/Block_Fight.java ===
package org.plefevre.View;

import org.plefevre.*;
import org.plefevre.Model.Hero;
import org.plefevre.Model.Map;
import org.plefevre.Model.Monster;

import java.util.ArrayList;
import java.util.Arrays;

import static java.lang.Math.max;
import static java.lang.Math.min;
import static org.plefevre.View.Block_Inventaire.HEIGHT_CASE;
import static org.plefevre.View.Block_Inventaire.WIDTH_CASE;

public class Block_Fight extends BlockRPG {
    public Monster monster = null;
    int selected_button = 0;

    ArrayList<String> output = new ArrayList<>();
    ArrayList<byte[]> colors = new ArrayList<>();

    public Block_Fight(int x, int y, int w, int h) {
        super(x, y, w, h);

        rx = x;
        ry = y;
        rw = w;
        rh = h;

        useColor = true;
        focus = true;
    }

    @Override
    public char[][] draw() {
        Map map = Game.game.getMap();

        buffer = new char[rh][rw];
        color = new byte[rh][rw];

        drawCadre("Fight ");
        setBorderColor(0, 0, rw, rh, (byte) -16);
        setBorderColor(1, 0, rw - 2, rh, (byte) -16);

        int x1 = rw / 3;
        int x2 = 2 * rw / 3;

        buffer[0][x1] = '┬';
        buffer[0][x2] = '┬';
        buffer[rh - 1][x1] = '┴';
        buffer[rh - 1][x2] = '┴';
        for (int i = 1; i < rh - 1; i++) {
            buffer[i][x1] = '│';
            buffer[i][x2] = '│';
        }
        if (focus) gestionFocus();

        drawMonster(0);
        drawHero(x2);
        drawButtons(x2, 30);
        drawLogs(x1);


        return buffer;
    }

    private void drawLogs(int xs) {
        int len_line = rw / 3 - 4 - 2;


        ArrayList<String> lines = new ArrayList<>();
        ArrayList<byte[]> linesCol = new ArrayList<>();

        for (int i = 0; i < output.size(); i++) {
            for (int j = 0; j < output.get(i).length(); j += len_line) {
                String sub = output.get(i).substring(j, min(j + len_line, output.get(i).length()));
                if (j > 0)
                    sub = "  " + sub;
                lines.add(sub);
                byte[] b = new byte[sub.length()];
                for (int k = j == 0 ? 0 : 2; k < b.length; k++) b[k] = colors.get(i)[j + k - (j == 0 ? 0 : 2)];
                linesCol.add(b);
            }
        }
        int nbToPrint = min(lines.size(), rh - 2 - 2);

        for (int i = 0; i < nbToPrint; i++) {
            int id = lines.size() - nbToPrint + i;
            setTextAt(buffer, lines.get(id), xs + 2, 1 + i);
            setColor(color, linesCol.get(id), xs + 2, 1 + i);
        }
    }

    private void gestionFocus() {
        Input input = Game.game.input;
        input.setListen_tap(false);
        input.setListen_x(0);
        input.setListen_y(Game.game.getRpgInterface().getH());

//        if (input.touch == 1) Game.game.hero.move(0, -1);
//        if (input.touch == 2) Game.game.hero.move(0, 1);

        if (input.getTouch() == 3) selected_button++;
        if (input.getTouch() == 4) selected_button--;
        if (input.getTouch() == 5) one_move();


        if (selected_button < 0)
            selected_button = 2;
        selected_button %= 3;

    }

    private void one_move() {
        int moveMonster = (int) (Math.random() * 3);
        Hero hero = Game.game.getHero();
        ConstructLog log = new ConstructLog();

        if (monster.getMana() < 10) moveMonster = 2;

        else if (monster.getMana() >= monster.getMaxMana() * 0.9 && moveMonster == 2)
            moveMonster = (int) (Math.random() * 2);


        if (moveMonster == 2) {
            monster.setMana(monster.getMana() + 5 + monster.getLvl() * 2);

            log.clean();
            log.add(monster.getName(), (byte) -1);
            log.add(" charges its mana.", (byte) 0);
            addTextColor(log);
        }

        if (selected_button == 2) {
            hero.setMana(hero.getMana() + 10 + hero.getLvl() * 3);

            log.clean();
            log.add(hero.getName(), (byte) -2);
            log.add(" charges its mana.", (byte) 0);
            addTextColor(log);
        }


        if (selected_button == 0) {
            int degat = hero.getAttackFight();
            int defense = (int) ((int) monster.getDefense() * 0.2);
            if (moveMonster == 1) defense = (int) (monster.getDefense() + (4 + monster.getLvl() / 2) * (Math.random() - 0.5));
            int mana_consom = (int) (degat * 0.8);

            mana_consom = min(mana_consom, hero.getMaxMana() / 4);

            log.clean();
            log.add(hero.getName(), (byte) -2);
            log.add(" attacks and deals ", (byte) 0);
            log.add(degat + "", (byte) -1);
            log.add(" but ", (byte) 0);
            log.add(monster.getName(), (byte) -1);
            log.add(" block ", (byte) 0);
            log.add(defense + "", (byte) -2);
            log.add(" and get finally ", (byte) 0);
            log.add(max(0, degat - defense) + "", (byte) -1);
            log.add(" damage ", (byte) 0);
            addTextColor(log);

            if (hero.removeMana(mana_consom)) {
                degat = max(0, degat - defense);
                monster.removePv( degat);
            } else {
                log.clean();
                log.add(hero.getName(), (byte) -2);
                log.add(" has not enought mana.", (byte) 0);
                addTextColor(log);
            }
        }

        if (moveMonster == 0 && monster.getPv() > 0) {
            int degat = (int) (monster.getAttack() + (4 + monster.getLvl() / 2) * (Math.random() - 0.5));
            int defense = (int) ((int) hero.getDefense() * 0.2);
            if (selected_button == 1) {
                defense = hero.getDefenseFight();
            }

            int mana_consom = (int) (degat * 0.75);


            if (monster.getMana() >= mana_consom) {
                log.clean();
                log.add(monster.getName(), (byte) -1);
                log.add(" attacks and deals ", (byte) 0);
                log.add(degat + "", (byte) -1);
                log.add(" but ", (byte) 0);
                log.add(hero.getName(), (byte) -2);
                log.add(" block ", (byte) 0);
                log.add(defense + "", (byte) -2);
                log.add(" and get finally ", (byte) 0);
                log.add(max(0, degat - defense) + "", (byte) -1);
                log.add(" damage ", (byte) 0);
                addTextColor(log);

                monster.removeMana(mana_consom);
                degat = max(0, degat - defense);
                hero.removePv(degat);

            } else {
                log.clean();
                log.add(monster.getName(), (byte) -1);
                log.add(" has not enought mana.", (byte) 0);
                addTextColor(log);
            }
        }


        if (hero.getPv() <= 0) {
            Game.game.input.reload();
            Game.game.getRpgInterface().setModal(new Block_Defeat());
        }
        if (monster.getPv() <= 0) {
            ArrayList<Artifact> artifacts = monster.getArtifact();
            int xp = monster.xpGet();

            hero.addXp(xp);
            for (Artifact artifact : artifacts) {
                hero.addToInventory(artifact);
            }

            Game.game.input.reload();
            Block_Victory modal = new Block_Victory();
            modal.xp = xp;
            modal.artifacts = artifacts;
            Game.game.getRpgInterface().setModal(modal);
        }


    }

    private void drawHero(int xs) {
        int sx;
        int sy;
        int y;
        Hero hero = Game.game.getHero();
        String asciiArt;
        asciiArt = hero.getAsciiArt();

        sx = xs + 6;
        sy = 4;

        drawAscii(buffer, asciiArt, sx, sy);

        int len = rw / 3 - 6;
        sx = xs + 26;
        sy = 5;
        y = sy;
        for (String s : Arrays.asList("Name", "Class", "Level", "Attack", "Defense")) {
            setColor(color, (byte) -100, sx, y, 16);
            setColor(color, (byte) 2, sx + 16, y, 16);
            buffer[y][sx + 15] = ':';
            setTextAt(buffer, s, sx, y++);
        }
        setTextAt(buffer, hero.getName(), sx + 17, sy);
        setTextAt(buffer, hero.getClassName(), sx + 17, sy + 1);
        setTextAt(buffer, hero.getLvl() + "", sx + 17, sy + 2);
        setTextAt(buffer, hero.getAttack() + "", sx + 17, sy + 3);
        setTextAt(buffer, hero.getDefense() + "", sx + 17, sy + 4);

        y += 3;
        //Draw bar pv
        String pv = hero.getPv() + " / " + hero.getMaxPV() + " PV";
        setTextAt(buffer, pv, xs + (len - pv.length()) / 2, y);
        int len_bar_pv = (len * hero.getPv()) / hero.getMaxPV();
        setColor(color, (byte) -9, xs + 3, y, len_bar_pv);
        setColor(color, (byte) -63, xs + len_bar_pv + 3, y, len - len_bar_pv);
        y += 2;

        //Draw bar mana
        String mana = hero.getMana() + " / " + hero.getMaxMana() + " Mana";
        setTextAt(buffer, mana, xs + (len - mana.length()) / 2, y);
        int len_bar_mana = (len * hero.getMana()) / hero.getMaxMana();
        setColor(color, (byte) -54, xs + 3, y, len_bar_mana);
        setColor(color, (byte) -63, xs + len_bar_mana + 3, y, len - len_bar_mana);

        int rw9 = rw / 9;
        y += 2;
        for (int i = 0; i < 3; i++) {
            drawBorder(buffer, color, (int) (xs + rw9 * (i + 0.5)) - WIDTH_CASE / 2, y + 2, WIDTH_CASE, HEIGHT_CASE);
        }

        if (hero.getCurrent_weapon() != null) {
            int xx = (int) (xs + rw9 * (0 + 0.5)) - WIDTH_CASE / 2 + 1;
            int yy = y + 3;
            char[] ascii = hero.getCurrent_weapon().getAscii();
            byte[] colorii = hero.getCurrent_weapon().getAscii_color();
            drawChar(buffer, ascii, xx, yy, WIDTH_CASE - 2);
            drawColor(color, colorii, xx, yy, WIDTH_CASE - 2);

            setBorderColor(xx - 1, yy - 1, WIDTH_CASE, HEIGHT_CASE, hero.getCurrent_weapon().getColor());

            setTextAt(buffer, hero.getCurrent_weapon().getName(WIDTH_CASE), xx, yy + 4);
        }


        if (hero.getCurrent_armor() != null) {
            int xx = (int) (xs + rw9 * (1 + 0.5)) - WIDTH_CASE / 2 + 1;
            int yy = y + 3;
            char[] ascii = hero.getCurrent_armor().getAscii();
            byte[] colorii = hero.getCurrent_armor().getAscii_color();
            drawChar(buffer, ascii, xx, yy, WIDTH_CASE - 2);
            drawColor(color, colorii, xx, yy, WIDTH_CASE - 2);

            setBorderColor(xx - 1, yy - 1, WIDTH_CASE, HEIGHT_CASE, hero.getCurrent_armor().getColor());

            setTextAt(buffer, hero.getCurrent_armor().getName(WIDTH_CASE), xx, yy + 4);
        }

        if (hero.getCurrent_helm() != null) {
            int xx = (int) (xs + rw9 * (2 + 0.5)) - WIDTH_CASE / 2 + 1;
            int yy = y + 3;
            char[] ascii = hero.getCurrent_helm().getAscii();
            byte[] colorii = hero.getCurrent_helm().getAscii_color();
            drawChar(buffer, ascii, xx, yy, WIDTH_CASE - 2);
            drawColor(color, colorii, xx, yy, WIDTH_CASE - 2);

            setBorderColor(xx - 1, yy - 1, WIDTH_CASE, HEIGHT_CASE, hero.getCurrent_helm().getColor());

            setTextAt(buffer, hero.getCurrent_helm().getName(WIDTH_CASE), xx, yy + 4);
        }

    }

    private void drawButtons(int xs, int ys) {
        int rw9 = rw / 9;


        drawButton(buffer, color, (int) (xs + rw9 * 0.1), ys, (int) (rw9 * .8), "Attack", (byte) (selected_button == 0 ? -17 : -64));
        drawButton(buffer, color, (int) (xs + rw9 * 1.1), ys, (int) (rw9 * .8), "Block", (byte) (selected_button == 1 ? -17 : -64));
        drawButton(buffer, color, (int) (xs + rw9 * 2.1), ys, (int) (rw9 * .8), "Charge", (byte) (selected_button == 2 ? -17 : -64));
    }

    private void drawMonster(int xs) {
        String asciiArt = monster.getAsciiArt();

        int sx = xs + 6;
        int sy = 4;

        int y;

        drawAscii(buffer, asciiArt, sx, sy);

        sx = xs + 30;
        sy = 5;
        y = sy;

        for (String s : Arrays.asList("Name", "Level", "Attack", "Defense")) {
            setColor(color, (byte) -100, sx, y, 16);
            setColor(color, (byte) 2, sx + 16, y, 16);
            buffer[y][sx + 15] = ':';
            setTextAt(buffer, s, sx, y++);
        }

        setTextAt(buffer, monster.getName(), sx + 17, sy);
        setTextAt(buffer, String.valueOf(monster.getLvl()), sx + 17, sy + 1);
        setTextAt(buffer, String.valueOf(monster.getAttack()), sx + 17, sy + 2);
        setTextAt(buffer, String.valueOf(monster.getDefense()), sx + 17, sy + 3);
        int len = rw / 3 - 6;

        y += 5;
        //Draw bar pv
        String pv_m = monster.getPv() + " / " + monster.getMaxPV() + " PV";
        setTextAt(buffer, pv_m, xs + (len - pv_m.length()) / 2, y);
        int len_bar_pv_m = (len * monster.getPv()) / monster.getMaxPV();
        setColor(color, (byte) -9, xs + 3, y, len_bar_pv_m);
        setColor(color, (byte) -63, xs + len_bar_pv_m + 3, y, len - len_bar_pv_m);
        y += 2;

        //Draw bar mana
        String mana_m = monster.getMana() + " / " + monster.getMaxMana() + " Mana";
        setTextAt(buffer, mana_m, xs + (len - mana_m.length()) / 2, y);
        int len_bar_mana_m = (len * monster.getMana()) / monster.getMaxMana();
        setColor(color, (byte) -54, xs + 3, y, len_bar_mana_m);
        setColor(color, (byte) -63, xs + len_bar_mana_m + 3, y, len - len_bar_mana_m);
    }

    public void addTextColor(String txt, byte[] col) {
        output.add(txt);
        colors.add(col);
    }

    private void addTextColor(ConstructLog log) {
        addTextColor(log.getString(), log.getColor());
    }
}
=== ./View/Block_LvlComplete.java ===
package org.plefevre.View;

import org.plefevre.Game;
import org.plefevre.Input;

public class Block_LvlComplete extends BlockRPG {
    int selected = 0;

    public Block_LvlComplete() {
        this(0, 0, 100, 20);
    }


    public Block_LvlComplete(int x, int y, int w, int h) {
        super(x, y, w, h);

        rx = x;
        ry = y;
        rw = w;
        rh = h;

        useColor = true;
        focus = true;
    }

    @Override
    public char[][] draw() {
        buffer = new char[rh][rw];
        color = new byte[rh][rw];

        drawCadre("Level complete ");
        fillColor(color, 0, 0, rw, rh, (byte) -25);

        if (focus) gestionFocus();

        drawAscii(buffer, "▗▖   ▗▄▄▄▖▗▖  ▗▖▗▄▄▄▖▗▖        ▗▄▄▖ ▗▄▖ ▗▖  ▗▖▗▄▄▖ ▗▖   ▗▄▄▄▖▗▄▄▄▖▗▄▄▄▖\n" +
                "▐▌   ▐▌   ▐▌  ▐▌▐▌   ▐▌       ▐▌   ▐▌ ▐▌▐▛▚▞▜▌▐▌ ▐▌▐▌   ▐▌     █  ▐▌   \n" +
                "▐▌   ▐▛▀▀▘▐▌  ▐▌▐▛▀▀▘▐▌       ▐▌   ▐▌ ▐▌▐▌  ▐▌▐▛▀▘ ▐▌   ▐▛▀▀▘  █  ▐▛▀▀▘\n" +
                "▐▙▄▄▖▐▙▄▄▖ ▝▚▞▘ ▐▙▄▄▖▐▙▄▄▖    ▝▚▄▄▖▝▚▄▞▘▐▌  ▐▌▐▌   ▐▙▄▄▖▐▙▄▄▖  █  ▐▙▄▄▖", (rw - 73) / 2, 3);

        setTextAt(buffer, "Congratulation! Next level?", (rw - 27) / 2, 8);

        drawButton(buffer, color, rw / 2 - 30, 12, 12, "Continue", (byte) (selected == 0 ? -65 : -25));
        drawButton(buffer, color, rw / 2 + 18, 12, 12, "Leave", (byte) (selected == 1 ? -65 : -25));

        return buffer;
    }

    private void gestionFocus() {
        Input input = Game.game.input;
        input.setListen_tap(false);
        input.setListen_x(0);
        input.setListen_y(Game.game.getRpgInterface().getH());

        if (input.getTouch() == 3) selected++;
        if (input.getTouch() == 4) selected--;
        if (input.getTouch() == 5) {
            if (selected == 1) {
                System.exit(0);
            } else {
                Game.game.initGame();
                input.reload();
            }

        }


        if (selected < 0)
            selected = 1;
        selected %= 2;

    }
}=== ./View/Block_Inventaire.java ===
package org.plefevre.View;

import org.plefevre.Artifact;
import org.plefevre.Game;
import org.plefevre.Model.Hero;
import org.plefevre.Input;

import java.util.ArrayList;
import java.util.Arrays;

public class Block_Inventaire extends BlockRPG {

    int selected = 0;
    int subSelected = 0;
    boolean select = false;

    public Block_Inventaire(int x, int y, int w, int h) {
        super(x, y, w, h);
        useColor = true;
    }

    final static int HEIGHT_CASE = 7;
    final static int WIDTH_CASE = 12;

    @Override
    public char[][] draw() {
        Hero hero = Game.game.getHero();
        buffer = new char[rh][rw];
        color = new byte[rh][rw];
        if (rh < 20 || rw < 30) return buffer;

        drawCadre("Inventory ");
        if (focus) {
            setBorderColor(0, 0, rw, rh, (byte) 2);
            gestionFocus();
        }


        int nbCase_per_line = (rw - 4) / WIDTH_CASE;
        for (int i = 0; i < Hero.INVENTORY_SIZE; i++) {
            Artifact artifact = hero.getInventory(i);

            int x = (i % nbCase_per_line) * WIDTH_CASE;
            int y = (i / nbCase_per_line) * HEIGHT_CASE;

            drawBorder(buffer, color, x + 2, y + 2, WIDTH_CASE, HEIGHT_CASE);

            if (artifact != null) {

                char[] ascii = artifact.getAscii();
                byte[] colorii = artifact.getAscii_color();
                drawChar(buffer, ascii, x + 3, y + 3, WIDTH_CASE - 2);
                drawColor(color, colorii, x + 3, y + 3, WIDTH_CASE - 2);

                setBorderColor(x + 2, y + 2, WIDTH_CASE, HEIGHT_CASE, artifact.getColor());

                setTextAt(buffer, artifact.getName(WIDTH_CASE), x + 3, y + 7);
            }

            if (selected == i && focus) {
                setBorderColor(x + 2, y + 2, WIDTH_CASE, HEIGHT_CASE, (byte) ((artifact != null ? artifact.getColor() : 0) + 36));
                setBorderColor(x + 2, y + 2 + HEIGHT_CASE - 2, WIDTH_CASE, 2, (byte) ((artifact != null ? artifact.getColor() : 0) + 36));


            }

        }

        int line_y = (int) (Math.ceil(1.0f * Hero.INVENTORY_SIZE / nbCase_per_line) * HEIGHT_CASE + 3);
        buffer[line_y][0] = '├';
        buffer[line_y][rw - 1] = '┤';
        for (int i = 1; i < rw - 1; i++) {
            buffer[line_y][i] = '─';
        }


        Artifact selectArtifact = hero.getInventory(selected);
        if (selectArtifact != null) {
            drawBorder(buffer, color, 2, line_y + 2, WIDTH_CASE, HEIGHT_CASE);
            setBorderColor(2, line_y + 2, WIDTH_CASE, HEIGHT_CASE, selectArtifact.getColor());

            char[] ascii = selectArtifact.getAscii();
            byte[] colorii = selectArtifact.getAscii_color();
            drawChar(buffer, ascii, 3, line_y + 3, WIDTH_CASE - 2);
            drawColor(color, colorii, 3, line_y + 3, WIDTH_CASE - 2);
            setTextAt(buffer, selectArtifact.getName(WIDTH_CASE), 3, line_y + 7);

            int sx = 16;
            int y = line_y + 3;
            for (String s : Arrays.asList("Name", "Level", "Attack", "Defense", "Effect")) {
                setColor(color, (byte) -100, sx, y, 14);
                setColor(color, (byte) 2, sx + 14, y, 20);
                buffer[y][sx + 13] = ':';
                setTextAt(buffer, s, sx, y++);
            }
            y = line_y + 3;
            setTextAt(buffer, selectArtifact.getName(), sx + 15, y++);
            setTextAt(buffer, selectArtifact.getLvl() + "", sx + 15, y++);
            setTextAt(buffer, selectArtifact.getAttack() + "", sx + 15, y++);
            setTextAt(buffer, selectArtifact.getDefense() + "", sx + 15, y++);

            ArrayList<Artifact.PassivEffect> passivEffects = selectArtifact.getPassivEffect();

            for (Artifact.PassivEffect passivEffect : passivEffects) {
                String val = "";
                byte col = -1;
                if (passivEffect.getValue() >= 0) {
                    val = "+" + passivEffect.getValue();
                    col = -2;
                } else val = passivEffect.getValue() + "";
                setColor(color, col, sx + 14, y, 20);
                setTextAt(buffer, val + " " + passivEffect.getName(), sx + 15, y++);
            }
        }


        if (select) {
            if (selectArtifact != null) {
                int y = line_y + HEIGHT_CASE + 3;
                boolean isEquipable = selectArtifact.getType() == Artifact.TYPE_WEAPON || selectArtifact.getType() == Artifact.TYPE_ARMOR || selectArtifact.getType() == Artifact.TYPE_HELM;
                boolean isUsable = selectArtifact.getType() == Artifact.TYPE_POTION;

                if (isEquipable)
                    drawButton(buffer, color, 2, y, 10, "Equip", (byte) (subSelected == 0 ? -65 : 0));
                if (isUsable)
                    drawButton(buffer, color, 2, y, 10, "Use", (byte) (subSelected == 0 ? -65 : 0));

                drawButton(buffer, color, 16, y, 10, "Throw", (byte) (subSelected == ((isEquipable || isUsable) ? 1 : 0) ? -65 : 0));

                drawButton(buffer, color, 30, y, 5, "X", (byte) ((subSelected == 2 || (!(isEquipable || isUsable) && subSelected == 1)) ? -65 : 0));
            } else {
                int y = line_y - 1;
                drawButton(buffer, color, 2, y += 3, 20, "Un-equip Weapon", (byte) (subSelected == 0 ? -65 : 0));
                drawButton(buffer, color, 2, y += 3, 20, "Un-equip Armor", (byte) (subSelected == 1 ? -65 : 0));
                drawButton(buffer, color, 2, y += 3, 20, "Un-equip Helm", (byte) (subSelected == 2 ? -65 : 0));

                drawButton(buffer, color, 2, y += 3, 5, "X", (byte) (subSelected == 3 ? -65 : 0));

            }
        }

        return buffer;
    }

    private void gestionFocus() {
        Input input = Game.game.input;
        input.setListen_tap(false);
        input.setListen_x(0);
        input.setListen_y(Game.game.getRpgInterface().getH());

        if (!select) {
            if (input.getTouch() == 3) selected++;
            if (input.getTouch() == 4) selected--;

            if (input.getTouch() == 1 && selected >= 4) selected -= 4;
            if (input.getTouch() == 2 && selected <= 5) selected += 4;


            if (input.getTouch() == 5) {
                select = true;
                subSelected = 0;
            }

            if (selected < 0)
                selected = Hero.INVENTORY_SIZE - 1;
            selected %= Hero.INVENTORY_SIZE;
        } else {
            Artifact selectArtifact = Game.game.getHero().getInventory(selected);
            if (selectArtifact != null) {
                if (input.getTouch() == 3) subSelected++;
                if (input.getTouch() == 4) subSelected--;

                boolean isEquipable = selectArtifact.getType() == Artifact.TYPE_WEAPON || selectArtifact.getType() == Artifact.TYPE_ARMOR || selectArtifact.getType() == Artifact.TYPE_HELM;
                boolean isUsable = selectArtifact.getType() == Artifact.TYPE_POTION;

                if (isEquipable || isUsable) {
                    if (subSelected < 0)
                        subSelected = 2;
                    subSelected %= 3;

                    if (input.getTouch() == 5) {
                        if (subSelected == 2) {
                            select = false;
                        }
                        if (subSelected == 1) {
                            Game.game.getHero().throwE(selected);
                            select = false;
                        }
                        if (subSelected == 0) {
                            if (selectArtifact.getLvl() > Game.game.getHero().getLvl()) {
                                Game.game.getLog().addTextColor("Level too hight", (byte) 1);

                            } else {
                                if (selectArtifact.getType() == Artifact.TYPE_WEAPON || selectArtifact.getType() == Artifact.TYPE_ARMOR || selectArtifact.getType() == Artifact.TYPE_HELM)
                                    Game.game.getHero().equip(selected);
                                else if (selectArtifact.getType() == Artifact.TYPE_POTION) Game.game.getHero().use(selected);
                                select = false;
                            }
                        }
                    }
                } else {
                    if (subSelected < 0)
                        subSelected = 1;
                    subSelected %= 2;

                    if (input.getTouch() == 5) {
                        if (subSelected == 0) Game.game.getHero().throwE(selected);
                        select = false;
                    }

                }

            } else {
                if (input.getTouch() == 1) subSelected--;
                if (input.getTouch() == 2) subSelected++;

                if (input.getTouch() == 5) {
                    Game.game.getLog().addSimpleText("Select : " + subSelected);

                    if (subSelected == 0) Game.game.getHero().unequip(Artifact.TYPE_WEAPON, selected);
                    else if (subSelected == 1) Game.game.getHero().unequip(Artifact.TYPE_ARMOR, selected);
                    else if (subSelected == 2) Game.game.getHero().unequip(Artifact.TYPE_HELM, selected);

                    select = false;
                }

                if (subSelected < 0)
                    subSelected = 3;
                subSelected %= 4;
            }

        }
        if (input.getTouch() == 5)
            input.reload();


    }

}
=== ./View/Block_Defeat.java ===
package org.plefevre.View;

import org.plefevre.Game;
import org.plefevre.Input;

public class Block_Defeat extends BlockRPG {
    int selected = 0;

    public Block_Defeat() {
        this(0, 0, 100, 20);
    }


    public Block_Defeat(int x, int y, int w, int h) {
        super(x, y, w, h);

        rx = x;
        ry = y;
        rw = w;
        rh = h;

        useColor = true;
        focus = true;
    }

    @Override
    public char[][] draw() {

        buffer = new char[rh][rw];
        color = new byte[rh][rw];

        drawCadre("Defeat ");
        fillColor(color, 0, 0, rw, rh, (byte) -16);

        if (focus) gestionFocus();


        drawAscii(buffer, "▗▄▄▖ ▗▄▖ ▗▖  ▗▖▗▄▄▄▖     ▗▄▖ ▗▖  ▗▖▗▄▄▄▖▗▄▄▖ \n" +
                "▐▌   ▐▌ ▐▌▐▛▚▞▜▌▐▌       ▐▌ ▐▌▐▌  ▐▌▐▌   ▐▌ ▐▌\n" +
                "▐▌▝▜▌▐▛▀▜▌▐▌  ▐▌▐▛▀▀▘    ▐▌ ▐▌▐▌  ▐▌▐▛▀▀▘▐▛▀▚▖\n" +
                "▝▚▄▞▘▐▌ ▐▌▐▌  ▐▌▐▙▄▄▖    ▝▚▄▞▘ ▝▚▞▘ ▐▙▄▄▖▐▌ ▐▌\n", (rw - 45) / 2, 3);

        setTextAt(buffer, "You are dead :/ Continue?", (rw - 25) / 2, 8);

        drawButton(buffer, color, rw / 2 - 30, 12, 12, "Restart", (byte) (selected == 0 ? -64 : -16));
        drawButton(buffer, color, rw / 2 + 18, 12, 12, "Leave", (byte) (selected == 1 ? -64 : -16));

        return buffer;
    }

    private void gestionFocus() {
        Input input = Game.game.input;
        input.setListen_tap(false);
        input.setListen_x(0);
        input.setListen_y(Game.game.getRpgInterface().getH());

        if (input.getTouch() == 3) selected++;
        if (input.getTouch() == 4) selected--;
        if (input.getTouch() == 5) {
            if (selected == 1) {
                System.exit(0);
            }else {
                Game.game.initGame();
                input.reload();
            }
        }


        if (selected < 0)
            selected = 1;
        selected %= 2;

    }
}
=== ./View/Block_Map.java ===
package org.plefevre.View;

import org.plefevre.Game;
import org.plefevre.Model.Hero;
import org.plefevre.Input;
import org.plefevre.Model.Map;

import static java.lang.Math.max;

public class Block_Map extends BlockRPG {
    public Block_Map(int x, int y, int w, int h) {
        super(x, y, w, h);
        useColor = true;
    }

    @Override
    public char[][] draw() {
        Hero hero = Game.game.getHero();
        Map map = Game.game.getMap();
        int size = map.getSize();

        int dx = size / 2 - hero.getX();
        int dy = size / 2 - hero.getY();

        int MdX = max(0, (size * 2 - (rw - 6)) / 2);
        int MdY = max(0, (size - (rh - 4)) / 2);

        dx *= 2;

        dx = Math.min(MdX, max(-MdX, dx));
        dy = Math.min(MdY, max(-MdY, dy));


        buffer = new char[rh][rw];
        color = new byte[rh][rw];

        drawCadre("Map ");
        if (focus) {
            setBorderColor(0, 0, rw, rh, (byte) 2);
            gestionFocus();
        }
        int centerX = rw / 2 - size + dx;
        int centerY = rh / 2 - size / 2 + dy;

        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                Map.Tile tile = map.tiles[i][j];

                int x = j * 2 + centerX;
                int y = i + centerY;

                if (x <= 1 || x >= rw - 2 || y <= 1 || y >= rh - 1)
                    continue;

                byte col = 18;


                if (tile.isMountain()) col = 27;
                if (tile.isWater()) col = 36;

//                buffer[y][x] = (char) ('0' + tile.v);
                int typ = tile.getType_tile();

                if (hero.getX() == j && hero.getY() == i) {
                    buffer[y][x] = '[';
                    buffer[y][x + 1] = ']';
                    col += 4;
                    col *= -1;
                } else if (tile.getMonster() != null) {
                    buffer[y][x] = '>';
                    buffer[y][x + 1] = '<';
                    col += 1;
                    col *= -1;
                } else if (typ != 0) {
                    if (tile.isMountain()) {
                        if (typ == 1) {
                            buffer[y][x] = '/';
                            buffer[y][x + 1] = '\\';
                        } else if (typ == 2) {
                            buffer[y][x] = '^';
                            buffer[y][x + 1] = '^';
                        } else if (typ == 3) {
                            buffer[y][x] = '#';
                            buffer[y][x + 1] = ' ';
                        } else if (typ == 4) {
                            buffer[y][x] = ' ';
                            buffer[y][x + 1] = '#';
                        }
                    } else if (tile.isWater()) {
                        col += 6;
                        if (typ == 1) {
                            buffer[y][x] = '~';
                            buffer[y][x + 1] = ' ';
                        } else if (typ == 2) {
                            buffer[y][x] = '≈';
                            buffer[y][x + 1] = ' ';
                        } else if (typ == 3) {
                            buffer[y][x] = ' ';
                            buffer[y][x + 1] = '~';
                        } else if (typ == 4) {
                            buffer[y][x] = ' ';
                            buffer[y][x + 1] = '≈';
                        }
                    } else {
                        if (typ == 1) {
                            buffer[y][x] = '_';
                            buffer[y][x + 1] = ' ';
                        } else if (typ == 2) {
                            buffer[y][x] = '.';
                            buffer[y][x + 1] = ' ';
                        } else if (typ == 3) {
                            buffer[y][x] = ' ';
                            buffer[y][x + 1] = '_';
                        } else if (typ == 4) {
                            buffer[y][x] = ' ';
                            buffer[y][x + 1] = '.';
                        }
                    }
                } else if (i >= 1 && i < size - 1 && j >= 1 && j < size - 1) {

                    Map.Tile tl = map.tiles[i][j - 1];
                    Map.Tile tr = map.tiles[i][j + 1];
                    Map.Tile tu = map.tiles[i - 1][j];
                    Map.Tile td = map.tiles[i + 1][j];

                    if (tu.isMountain() && tr.isMountain() && !tile.isMountain() && !td.isMountain() && !tl.isMountain()) {
                        buffer[y][x + 1] = '▀';
                        col += 3;
                    } else if (tu.isMountain() && !tr.isMountain() && !tile.isMountain() && !td.isMountain() && tl.isMountain()) {
                        buffer[y][x] = '▀';
                        col += 3;
                    } else if (!tu.isMountain() && tr.isMountain() && !tile.isMountain() && td.isMountain() && !tl.isMountain()) {
                        buffer[y][x + 1] = '▄';
                        col += 3;
                    } else if (!tu.isMountain() && !tr.isMountain() && !tile.isMountain() && td.isMountain() && tl.isMountain()) {
                        buffer[y][x] = '▄';
                        col += 3;
                    } else if (!tu.isMountain() && tr.isMountain() && !tile.isMountain() && td.isMountain() && tl.isMountain()) {
                        buffer[y][x] = '▄';
                        buffer[y][x + 1] = '▄';
                        col += 3;
                    } else if (tu.isMountain() && tr.isMountain() && !tile.isMountain() && !td.isMountain() && tl.isMountain()) {
                        buffer[y][x] = '▀';
                        buffer[y][x + 1] = '▀';
                        col += 3;
                    } else if (tu.isWater() && tr.isWater() && !tile.isWater() && !td.isWater() && !tl.isWater()) {
                        buffer[y][x + 1] = '▀';
                        col += 4;
                    } else if (tu.isWater() && !tr.isWater() && !tile.isWater() && !td.isWater() && tl.isWater()) {
                        buffer[y][x] = '▀';
                        col += 4;
                    } else if (!tu.isWater() && tr.isWater() && !tile.isWater() && td.isWater() && !tl.isWater()) {
                        buffer[y][x + 1] = '▄';
                        col += 4;
                    } else if (!tu.isWater() && !tr.isWater() && !tile.isWater() && td.isWater() && tl.isWater()) {
                        buffer[y][x] = '▄';
                        col += 4;
                    } else if (!tu.isWater() && tr.isWater() && !tile.isWater() && td.isWater() && tl.isWater()) {
                        buffer[y][x] = '▄';
                        buffer[y][x + 1] = '▄';
                        col += 4;
                    } else if (tu.isWater() && tr.isWater() && !tile.isWater() && !td.isWater() && tl.isWater()) {
                        buffer[y][x] = '▀';
                        buffer[y][x + 1] = '▀';
                        col += 4;
                    }
                }

                color[y][x] = col;
                color[y][x + 1] = col;
            }
        }


        return buffer;
    }

    private void gestionFocus() {
        Input input = Game.game.input;
        input.setListen_tap(false);

        if (input.getTouch() == 1) Game.game.moveHero(0, -1);
        if (input.getTouch() == 2) Game.game.moveHero(0, 1);
        if (input.getTouch() == 3) Game.game.moveHero(1, 0);
        if (input.getTouch() == 4) Game.game.moveHero(-1, 0);


    }
}
=== ./View/RPGInterface.java ===
package org.plefevre.View;

import org.plefevre.Animation;
import org.plefevre.Color;
import org.plefevre.Smiley;
import org.plefevre.Tools;

import java.util.ArrayList;

import static java.lang.Math.max;
import static org.plefevre.Smiley.smileyMap;
import static org.plefevre.TerminalSize.getTerminalSize;

public class RPGInterface {
    ArrayList<BlockRPG> blockRPGS;

    BlockRPG modal = null;

    int animationOpen = 0;
    int final_animationOpen = 0;

    int h = 0;
    int w = 0;
    int height_bloc;
    int[] width_bloc;
    boolean loaded = false;

    final static boolean DISPLAY_TERMINAL = true;

    public void update() {
        int[] size = getTerminalSize();
        h = size[0];
        w = size[1];

        if (h < 65 || w < 274) {
            System.out.println("Screen too small. Press any touch when resized.");
            return;
        }
        loaded = true;


        final_animationOpen = w / 2;

//        for (int i = 0; i < blockRPGS.size(); i++) System.out.println(blockRPGS.get(i));
        //La hauteur max en bloc
        height_bloc = 0;
        for (BlockRPG bc : blockRPGS) height_bloc = max(height_bloc, bc.getY() + bc.getH());
        //la largeur max en bloc par y;
        width_bloc = new int[height_bloc];
        for (BlockRPG bc : blockRPGS) {
            for (int j = 0; j < bc.getH(); j++)
                width_bloc[bc.getY() + j] = max(width_bloc[bc.getY() + j], bc.getX() + bc.getW());
        }

        for (BlockRPG bc : blockRPGS) {
            bc.update(w * bc.getW() / width_bloc[bc.getY()], h * bc.getH() / height_bloc, bc.getX() * w / width_bloc[bc.getY()], bc.getY() * h / height_bloc);
        }

//        System.out.println("Height : " + h + "  Width : " + w);
//        System.out.println("Width_bloc: " + Tools.arrToString(width_bloc));
//        System.out.println("height_bloc: " + height_bloc);


    }

    public void draw() {
        char[][] buffer = new char[h][w];
        byte[][] color = new byte[h][w];

        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) color[i][j] = 0;
        }

        for (BlockRPG bc : blockRPGS) {
            int x = bc.getX() * w / width_bloc[bc.getY()];
            int y = bc.getY() * h / height_bloc;

            char[][] buf = bc.draw();
            byte[][] col = bc.color();

            for (int i = 0; i < buf.length; i++) System.arraycopy(buf[i], 0, buffer[y + i], x, buf[i].length);
            if (col != null)
                for (int i = 0; i < col.length; i++) System.arraycopy(col[i], 0, color[y + i], x, col[i].length);
        }

        if (modal != null) {
            int x = (w - modal.getRw()) / 2;
            int y = (h - modal.getRh()) / 2;

            char[][] buf = modal.draw();
            if (modal == null)
                return;
            byte[][] col = modal.color();

            for (int i = 0; i < buf.length; i++) System.arraycopy(buf[i], 0, buffer[y + i], x, buf[i].length);
            if (col != null)
                for (int i = 0; i < col.length; i++) System.arraycopy(col[i], 0, color[y + i], x, col[i].length);
        }

        char[][] buffer_cpy = Tools.deepCopyCharArray(buffer);
        byte[][] color_cpy = Tools.deepCopyByteArray(color);

        while (DISPLAY_TERMINAL && animationOpen < final_animationOpen) {
            animationOpen += 3;

            buffer = Tools.deepCopyCharArray(buffer_cpy);
            color = Tools.deepCopyByteArray(color_cpy);

            Animation.circleAnimation(buffer, color, animationOpen);
            System.out.println(animationOpen + "");
            displayOnScreen(buffer, color);

            try {
                Thread.sleep(20);
            } catch (InterruptedException e) {
            }
        }


        if (DISPLAY_TERMINAL) displayOnScreen(buffer_cpy, color_cpy);
    }

    private void displayOnScreen(char[][] buffer, byte[][] color) {

        System.out.print("\033[H\033[2J");
        System.out.flush();

        System.out.print(Color.RESET);

        StringBuilder outputBuffer = new StringBuilder();
        byte lastC = 100;

        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {

                byte bcolor = color[i][j];
                if (bcolor != lastC) {

                    outputBuffer.append(Color.RESET);
                    if (bcolor < 0)
                        outputBuffer.append(Color.BOLD);

                    lastC = bcolor;

                    if (bcolor < 0)
                        bcolor *= -1;
                    if (bcolor == 100)
                        bcolor = 0;

                    int ind_front = bcolor % 9;
                    int ind_bg = bcolor / 9;

                    if (ind_front > 0) outputBuffer.append(Color.frontColor[ind_front]);
                    if (ind_bg > 0) outputBuffer.append(Color.backgroundColor[ind_bg]);
                }

                char c = buffer[i][j];
                if (smileyMap.containsKey(c)) {
                    outputBuffer.append(smileyMap.get(c));
                    j += Smiley.width_smile[c - 1] - 1; // Ajuster j si nécessaire
                } else if (c != '\0') outputBuffer.append(c);
                else outputBuffer.append(' ');
            }
            outputBuffer.append(System.lineSeparator());
        }

        System.out.print(outputBuffer);
    }

    public int getH() {
        return h;
    }

    public int getW() {
        return w;
    }

    public void setModal(BlockRPG modal) {
        this.modal = modal;
    }
}


//  ▄▄▄▄▄  ▄▄▄▄▄  ▄▄▄▄▄  ▄▄▄▄▄   ▄▄▄▄▄
//  █▄█▄█  █▄█▄█  █▄█▄█  █▄█▄█   █▄▀▄█
//  ▀|||▀   ▀▀▀   ▀███▀  █▀▀▀█   ▀▀ ▀▀

//  o o o o
//  ▄ ▄ ▄ ▄
//  ▀▀▀▀▀▀▀

//    ||     ||     ││      ||      ||     ||        ||
//   /  \   /  \    ▐▌     /██\    /██\   /██\      /██\
//   \__/  /____\   ▐▌     |██|    \██/  /████\     |██|


//      /--\
//  ===<    >===
//      \--/

//      ┌──────┐
//      │      │
//      └──────┘

//♠♤♥♡♧♦♢
// =<O>=

//█
//▄
//▌
//▐▌
//▐
//▀
//░
//▒
//▓=== ./Game.java ===
package org.plefevre;

import org.plefevre.Model.Hero;
import org.plefevre.Model.Map;
import org.plefevre.View.*;

import java.util.ArrayList;

public class Game extends Menu {

    //TODO modal choose battle
    //TODO GUI
    //TODO BDD
    //TODO Annotation based user input validation.

    public static Game game = new Game();
    public Input input = new Input();
    Map map;
    Hero hero = null;

    int heroId = 0;

    int focus = 0;

    RPGInterface rpgInterface;
    Block_Log log;

    private boolean redraw = false;

    public Game() {
        rpgInterface = new RPGInterface();

        System.out.println("Test " + Color.BOLD + Color.BLUE + "Test " + Color.BOLD_OFF + "Test " + Color.RESET);

        ArrayList<BlockRPG> blockRPGS = new ArrayList<>();

        log = new Block_Log(0, 4, 4, 1);

        blockRPGS.add(new Block_Hero(4, 0, 1, 2));
        blockRPGS.add(new Block_Inventaire(4, 2, 1, 3));
        blockRPGS.add(new Block_Map(0, 0, 4, 4));
        blockRPGS.add(log);

        BlockRPG.sort(blockRPGS);
        rpgInterface.blockRPGS = blockRPGS;

        rpgInterface.blockRPGS.get(focus).focus = true;
    }

    public void initGame() {
        rpgInterface.modal = null;

        Hero.loadHeroes();
        ArrayList<Hero> heroes = Hero.getHeroesSaved();
        hero = heroes.get(heroId);

        map = new Map(hero.lvl, (int) (Math.random() * 42000));

        hero.pv = hero.getMaxPV();
        hero.mana = hero.getMaxMana();
        map.centerHero(hero);

//        hero.addToInventory(ArtifactLibrary.artifactLibrary.getArtifactByName("Ring of Fury"));
//        hero.addToInventory(ArtifactLibrary.artifactLibrary.getArtifactByName("Health Potion"));
//        hero.addToInventory(ArtifactLibrary.artifactLibrary.getArtifactByName("Warrior's Helm"));
//        hero.addToInventory(ArtifactLibrary.artifactLibrary.getArtifactByName("Leather Cap"));
//        hero.addToInventory(ArtifactLibrary.artifactLibrary.getArtifactByName("Dragon Slayer"));
    }

    @Override
    public boolean interaction() {

        redraw = false;
        updateGamePlay();

        rpgInterface.update();

        if (!rpgInterface.loaded) {
            input.listen();
            return true;
        }

        rpgInterface.draw();
        if (redraw)
            return true;

        input.listen();

        if (input.text.equalsIgnoreCase("q")) System.exit(0);

        if (rpgInterface.modal != null) {
            rpgInterface.blockRPGS.get(focus).focus = false;
        } else {
            if (input.is_tab) {
                rpgInterface.blockRPGS.get(focus).focus = false;
                focus++;
                focus %= rpgInterface.blockRPGS.size();

                while (!rpgInterface.blockRPGS.get(focus).isFocusable()) {
                    focus++;
                    focus %= rpgInterface.blockRPGS.size();
                }
            }
            rpgInterface.blockRPGS.get(focus).focus = true;
        }

        return true;
    }

    private void updateGamePlay() {
        //Chercher si ennemy autour;

        Map.Tile[][] tiles = map.tiles;

        for (int k = -1; k < 2; k++) {
            for (int l = -1; l < 2; l++) {
                if (hero.y + k < 0 || hero.y + k >= tiles.length || hero.x + l < 0 || hero.x + l >= tiles[hero.y + k].length)
                    continue;
                if (tiles[hero.y + k][hero.x + l] != null && tiles[hero.y + k][hero.x + l].monster != null && !tiles[hero.y + k][hero.x + l].mountain ^ tiles[hero.y][hero.x].mountain) {
                    Block_Fight blockFight = new Block_Fight(0, 0, 200, 40);
                    blockFight.monster = tiles[hero.y + k][hero.x + l].monster;
                    tiles[hero.y + k][hero.x + l].monster = null;
                    rpgInterface.modal = blockFight;
                }
            }
        }
    }

    public void setHero(int heroId) {
        this.heroId = heroId;
    }


    public void moveHero(int dx, int dy) {
        hero.move(dx, dy);
        hero.regenerate();
        hero.updateEffect();
        input.reload();

        map.moveMonster();
    }

    public void setRedraw(boolean redraw) {
        this.redraw = redraw;
    }

    public RPGInterface getRpgInterface() {
        return rpgInterface;
    }

    public Hero getHero() {
        return hero;
    }

    public Block_Log getLog() {
        return log;
    }

    public Map getMap() {
        return map;
    }
}
=== ./Smiley.java ===
package org.plefevre;

import java.util.HashMap;
import java.util.Map;
public class Smiley {

    public final static char SMILEY_SWORD = 1;
    public final static char SMILEY_SHIELD = 2;
    public final static char SMILEY_HEART = 3;
    public final static char SMILEY_STAR = 4;
    public final static char SMILEY_BOW = 5;
    public final static char SMILEY_FIRE = 6;
    public final static char SMILEY_WIZARD = 7;
    public final static char SMILEY_DRAGON = 8;
    public final static char SMILEY_POTION = 9;
    public final static char SMILEY_CHAIN = 10;
    public final static char SMILEY_CRYSTAL = 11;
    public final static char SMILEY_HORSE = 12;
    public final static char SMILEY_TARGET = 13;
    public final static char SMILEY_GOLD = 14;
    public final static char SMILEY_SKULL = 15;
    public final static char SMILEY_CROWN = 16;
    public final static char SMILEY_PICKAXE = 17;
    public final static char SMILEY_TROPHY = 18;
    public final static char SMILEY_BALANCE = 19;
    public final static char SMILEY_HAMMER = 20;
    public final static char SMILEY_DAGGER = 21;
    public final static char SMILEY_HEART_BLACK = 22;
    public final static char SMILEY_CANDLE = 23;
    public final static char SMILEY_DUEL = 24;
    public final static char SMILEY_BARD = 25;
    public final static char SMILEY_VAMPIRE = 26;
    public final static char SMILEY_KNIGHT = 27;
    public final static char SMILEY_HOURGLASS = 28;
    public final static char SMILEY_MEDAL = 29;
    public final static char SMILEY_SCROLL = 30;

    final static Map<Character, String> smileyMap = new HashMap<>();

    static {
        // Initialisation de la table de correspondance
        smileyMap.put(SMILEY_SWORD, "🗡️️️️");
        smileyMap.put(SMILEY_SHIELD, "🛡️");
        smileyMap.put(SMILEY_HEART, "❤️");
        smileyMap.put(SMILEY_STAR, "⭐");
        smileyMap.put(SMILEY_BOW, "🏹");
        smileyMap.put(SMILEY_FIRE, "🔥");
        smileyMap.put(SMILEY_WIZARD, "🧙‍");
        smileyMap.put(SMILEY_DRAGON, "🐉");
        smileyMap.put(SMILEY_POTION, "⚗️");
        smileyMap.put(SMILEY_CHAIN, "⛓️");
        smileyMap.put(SMILEY_CRYSTAL, "💎");
        smileyMap.put(SMILEY_HORSE, "⛓️");
        smileyMap.put(SMILEY_TARGET, "⛓️");
        smileyMap.put(SMILEY_GOLD, "💰");
        smileyMap.put(SMILEY_SKULL, "💀");
        smileyMap.put(SMILEY_CROWN, "👑");
        smileyMap.put(SMILEY_PICKAXE, "⛏️");
        smileyMap.put(SMILEY_TROPHY, "🏆");
        smileyMap.put(SMILEY_BALANCE, "⚖️");
        smileyMap.put(SMILEY_HAMMER, "⚒️");
        smileyMap.put(SMILEY_DAGGER, "🗡️");
        smileyMap.put(SMILEY_HEART_BLACK, "🖤");
        smileyMap.put(SMILEY_CANDLE, "🕯️");
        smileyMap.put(SMILEY_DUEL, "⚔️");
        smileyMap.put(SMILEY_BARD, "🎶");
        smileyMap.put(SMILEY_VAMPIRE, "🧛‍");
        smileyMap.put(SMILEY_KNIGHT, "🦸‍");
        smileyMap.put(SMILEY_HOURGLASS, "⏳");
        smileyMap.put(SMILEY_MEDAL, "🥇");
        smileyMap.put(SMILEY_SCROLL, "📜");
    }
    final static int[] width_smile = {1,1,1,2,2,2,2,2,1,1,2,1,1,2,2,2,1,2,1,1,1,2,1,1,2,2,2,2,2,2,2};

}
=== ./Animation.java ===
package org.plefevre;

public class Animation {

    public static void circleAnimation(char[][] buffer, byte[][] color, int a) {
        int w2 = buffer[0].length / 2;
        int h2 = buffer.length / 2;

        for (int i = 0; i < buffer.length; i++) {
            for (int j = 0; j < buffer[i].length; j++) {
                int dis_cen = (int) Math.sqrt(Math.pow((i - h2)*2, 2) + Math.pow(j - w2, 2));
                if (dis_cen > a) {
                    buffer[i][j] = ' ';
                    color[i][j] = 0;
                }
            }
        }
    }
}
=== ./Color.java ===
package org.plefevre;

public class Color {
    // Codes ANSI pour les couleurs
    public static final String RESET = "\u001B[0m";
    public static final String BLACK = "\u001B[30m";
    public static final String RED = "\u001B[31m";
    public static final String GREEN = "\u001B[32m";
    public static final String YELLOW = "\u001B[33m";
    public static final String BLUE = "\u001B[34m";
    public static final String PURPLE = "\u001B[35m";
    public static final String CYAN = "\u001B[36m";
    public static final String WHITE = "\u001B[37m";

    // Codes ANSI pour les couleurs de fond
    public static final String BG_BLACK = "\u001B[40m";
    public static final String BG_RED = "\u001B[41m";
    public static final String BG_GREEN = "\u001B[42m";
    public static final String BG_YELLOW = "\u001B[43m";
    public static final String BG_BLUE = "\u001B[44m";
    public static final String BG_PURPLE = "\u001B[45m";
    public static final String BG_CYAN = "\u001B[46m";
    public static final String BG_WHITE = "\u001B[47m";

    public static final String BOLD = "\u001B[1m";
    public static final String BOLD_OFF = "\u001B[22m";

    public static final String[] frontColor = {BLACK, RED, GREEN, YELLOW, BLUE, PURPLE, CYAN, WHITE, BLACK};
    public static final String[] backgroundColor = {BG_BLACK, BG_RED, BG_GREEN, BG_YELLOW, BG_BLUE,
            BG_PURPLE, BG_CYAN, BG_WHITE, BG_BLACK};
}=== ./Position.java ===
package org.plefevre;

public class Position {
    public int x;
    public int y;
}
=== ./ConstructLog.java ===
package org.plefevre;

import java.util.ArrayList;
import java.util.Arrays;

public class ConstructLog {
    ArrayList<String> text = new ArrayList<>();
    ArrayList<byte[]> color = new ArrayList<>();

    public void clean() {
        text.clear();
        color.clear();
    }


    public void add(String txt, byte c) {
        byte[] b = new byte[txt.length()];
        Arrays.fill(b, c);
        text.add(txt);
        color.add(b);
    }


    public String getString() {
        StringBuilder s = new StringBuilder();
        for (String string : text) s.append(string);
        return s.toString();
    }

    public byte[] getColor() {
        int l = 0;
        for (int i = 0; i < color.size(); i++) {
            l += color.get(i).length;
        }

        byte[] b = new byte[l];

        int ind = 0;
        for (int i = 0; i < color.size(); i++) {
            for (int j = 0; j < color.get(i).length; j++) {
                b[ind + j] = color.get(i)[j];
            }
            ind += color.get(i).length;
        }

        return b;
    }
}
=== ./Menu.java ===
package org.plefevre;

import java.io.IOException;

public abstract class Menu {
    public static Menu menu;

    public static void init()
    {
        menu = new Menu_Choose_Hero();
    }

    public abstract boolean interaction();
}
=== ./Effect.java ===
package org.plefevre;

public class Effect {
    int duration;
    int attack;
    int defense;

    public Effect(int duration, int attack, int defense) {
        this.duration = duration;
        this.attack = attack;
        this.defense = defense;
    }
}
=== ./NoiseGenerator.java ===
package org.plefevre;

import java.util.Random;

public class NoiseGenerator {
    private final int[] permutation;

    public NoiseGenerator(int seed) {
        Random random = new Random(seed);
        permutation = new int[512];
        int[] p = new int[256];

        // Générer une permutation initiale
        for (int i = 0; i < 256; i++) {
            p[i] = i;
        }

        // Mélanger la permutation avec le seed
        for (int i = 0; i < 256; i++) {
            int swap = random.nextInt(256);
            int temp = p[i];
            p[i] = p[swap];
            p[swap] = temp;
        }

        // Dupliquer la permutation pour éviter des boucles dans le calcul du bruit
        for (int i = 0; i < 256; i++) {
            permutation[i] = p[i];
            permutation[256 + i] = p[i];
        }
    }

    // Fonction pour générer du bruit à partir de coordonnées x, y
    public double perlin(double x, double y) {
        // Trouver la position de la grille
        int xi = (int) Math.floor(x) & 255;
        int yi = (int) Math.floor(y) & 255;

        // Calculer les points flottants internes dans la cellule de la grille
        double xf = x - Math.floor(x);
        double yf = y - Math.floor(y);

        // Calculer des vecteurs de lissage
        double u = fade(xf);
        double v = fade(yf);

        // Extraire les vecteurs gradients pour chaque coin de la cellule
        int aa = permutation[permutation[xi] + yi];
        int ab = permutation[permutation[xi] + yi + 1];
        int ba = permutation[permutation[xi + 1] + yi];
        int bb = permutation[permutation[xi + 1] + yi + 1];

        // Interpoler les gradients
        double x1, x2, y1;
        x1 = lerp(grad(aa, xf, yf), grad(ba, xf - 1, yf), u);
        x2 = lerp(grad(ab, xf, yf - 1), grad(bb, xf - 1, yf - 1), u);
        y1 = lerp(x1, x2, v);

        // Retourner la valeur du bruit dans l'intervalle [-1, 1]
        return (y1 + 1) / 2;
    }

    // Fonction d'interpolation linéaire
    private double lerp(double a, double b, double t) {
        return a + t * (b - a);
    }

    // Fonction pour lisser les transitions entre les valeurs (courbe de fade de Perlin)
    private double fade(double t) {
        return t * t * t * (t * (t * 6 - 15) + 10);
    }

    // Fonction gradient pour calculer l'influence de chaque vecteur de gradient
    private double grad(int hash, double x, double y) {
        int h = hash & 7;
        double u = h < 4 ? x : y;
        double v = h < 4 ? y : x;
        return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
    }
}

=== ./Main.java ===
package org.plefevre;

import org.plefevre.Model.Hero;

public class Main {
    public static void main(String[] args) {
        Menu.init();
        Hero.loadHeroes();

        while (Menu.menu.interaction()) ;

    }
}=== ./Tools.java ===
package org.plefevre;

public class Tools {
    public static String arrToString(int[] arr) {
        if (arr == null || arr.length == 0) {
            return "[]";
        }
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        for (int i = 0; i < arr.length; i++) {
            sb.append(arr[i]);
            if (i < arr.length - 1) {
                sb.append(", ");
            }
        }
        sb.append("]");
        return sb.toString();
    }

    public static char[][] deepCopyCharArray(char[][] original) {
        if (original == null) return null;

        char[][] copy = new char[original.length][];

        for (int i = 0; i < original.length; i++) copy[i] = original[i].clone();

        return copy;
    }
    public static byte[][] deepCopyByteArray(byte[][] original) {
        if (original == null) return null;

        byte[][] copy = new byte[original.length][];

        for (int i = 0; i < original.length; i++) copy[i] = original[i].clone();

        return copy;
    }

    public static byte[] sub(byte[] by, int s, int f) {
        byte[] b = new byte[f-s];

        for (int i = 0; i < b.length; i++) {
            b[i] = by[s+i];
        }
        return b;
    }
}

=== ./Model/Map.java ===
package org.plefevre.Model;

import org.plefevre.Game;
import org.plefevre.NoiseGenerator;

import java.util.Random;

import static java.lang.Math.abs;

public class Map {
    int size;
    int lvl;
    public Tile[][] tiles;

    public static final double PROBA_GEN_MONSTER = 0.03 * 0.001;

    Random random;
    NoiseGenerator noise;

    public Map(int lvl, int seed) {
        this.lvl = lvl;
        size = (lvl - 1) * 5 + 10 - 1;
        tiles = new Tile[size][size];
        generateMap(seed);
    }


    public void generateMap(int seed) {
        random = new Random(seed);
        regenerate();
    }

    public void regenerate() {
        noise = new NoiseGenerator(random.nextInt());
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {

                Tile tile = new Tile();

                double noiseValue = noise.perlin(i * 0.1, j * 0.1);
                tile.v = (int) (noiseValue * 10);
                if (noiseValue > 0.6) {
                    tile.mountain = true;
                } else if (noiseValue < 0.3) {
                    tile.water = true;
                }

                if (random.nextDouble() < 0.05) {
                    tile.type_tile = 1 + random.nextInt(4);
                } else
                    tile.type_tile = 0;


                boolean monsterAround = false;
                for (int k = -1; k < 2; k++) {
                    for (int l = -1; l < 2; l++) {
                        if (i + k < 0 || i + k >= tiles.length || j + l < 0 || j + l >= tiles[i].length)
                            continue;
                        if (tiles[i + k][j + l] != null && tiles[i + k][j + l].monster != null)
                            monsterAround = true;

                    }
                }

                if (!monsterAround && !tile.water && random.nextDouble() < PROBA_GEN_MONSTER) {
                    tile.monster = new Monster(lvl - 2 + random.nextInt(5) + (tile.mountain ? 2 : 0));  // Fonction pour générer des monstres aléatoires
                }

                tiles[i][j] = tile;
            }
        }
    }

    public void centerHero(Hero hero) {
        hero.x = size / 2;
        hero.y = size / 2;

        int maxGen = 20;
        while (tiles[hero.y][hero.x].water && maxGen-- > 0) {
            regenerate();
        }

        if (maxGen == 0) {
            System.err.println("ERREUR, CANT FOUND MAP FOR THIS SEED.");
            System.exit(1);
        }

        for (int k = -2; k < 3; k++) {
            for (int l = -2; l < 3; l++) {
                if (hero.y + k < 0 || hero.y + k >= tiles.length || hero.x + l < 0 || hero.x + l >= tiles[hero.y].length)
                    continue;
                if (tiles[hero.y + k][hero.x + l] != null)
                    tiles[hero.y + k][hero.x + l].monster = null;
            }
        }
    }

    public Tile getTile(int x, int y) {
        if (x < 0 || y < 0 || x >= size || y >= size)
            return null;
        return tiles[y][x];
    }

    public void moveMonster() {

        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                tiles[i][j].movedMonster = false;
            }
        }

        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (tiles[i][j].monster != null && !tiles[i][j].movedMonster)
                    moveMonster(j, i);
            }
        }
    }

    private void moveMonster(int x, int y) {
        int nx = x;
        int ny = y;

        Hero hero = Game.game.hero;
        if (Math.sqrt(Math.pow(hero.x - x, 2) + Math.pow(hero.y - y, 2)) < 5) {
            int dx = hero.x - x;
            int dy = hero.y - y;

            if (abs(dx) > abs(dy))
                nx += dx > 0 ? 1 : -1;
            else
                ny += dy > 0 ? 1 : -1;
        } else {
            int mv = (int) (Math.random() * 4);
            if (mv == 0) nx++;
            if (mv == 1) nx--;
            if (mv == 2) ny++;
            if (mv == 3) ny--;
        }
        Map.Tile tileDepart = getTile(x, y);
        Map.Tile tile = getTile(nx, ny);
        if (tile == null || tile.water || tileDepart.mountain ^ tile.mountain || tile.monster != null)
            return;

        tile.monster = tileDepart.monster;
        tile.movedMonster = true;
        tileDepart.monster = null;

    }

    public int getSize() {
        return size;
    }

    public class Tile {
        boolean water = false;
        boolean mountain = false;
        int type_tile = 0;
        boolean movedMonster = false;
        Monster monster = null;
        int v;


        public boolean isWater() {
            return water;
        }

        public boolean isMountain() {
            return mountain;
        }

        public int getType_tile() {
            return type_tile;
        }

        public boolean isMovedMonster() {
            return movedMonster;
        }

        public Monster getMonster() {
            return monster;
        }

        public int getV() {
            return v;
        }
    }
}
=== ./Model/Hero.java ===
package org.plefevre.Model;

import org.plefevre.Artifact;
import org.plefevre.Effect;
import org.plefevre.Game;
import org.plefevre.View.Block_LvlComplete;

import java.io.*;
import java.util.ArrayList;

import static java.lang.Math.max;
import static java.lang.Math.min;

public class Hero {

    static final String FILE_SAVE = "heroes.txt";
    static ArrayList<Hero> heroes = new ArrayList<>();

    public final static int INVENTORY_SIZE = 10;

    final static int CLASS_WARRIOR = 0;
    final static int CLASS_MAGE = 1;
    final static int CLASS_ARCHER = 2;

    String name;
    String className;
    int lvl = 1;
    int experience = 0;
    int attack = 1;
    int defense = 1;
    int hit_point = 1;

    int pv = 100;
    int mana = 100;
    int x;
    int y;

    Artifact[] inventory = new Artifact[INVENTORY_SIZE];

    ArrayList<Effect> effects = new ArrayList<Effect>();

    Artifact current_weapon = null;
    Artifact current_armor = null;
    Artifact current_helm = null;

    public Hero(String name, String className) {
        setName(name);
        setClassName(className);
    }

    public int getAttack() {
        int att = 2 + (lvl + attack - 1) * 3;
        if (current_weapon != null) att += current_weapon.getAttack();

        for (Effect effect : effects) att += effect.attack * 3;

        return att;
    }

    public int getDefense() {
        int def = 2 + (lvl + defense - 1) * 3;
        if (current_armor != null) def += current_armor.getDefense();
        if (current_helm != null) def += current_helm.getDefense();

        for (Effect effect : effects) def += effect.defense * 3;

        return def;
    }

    public static void saveHeroes() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_SAVE))) {
            for (Hero hero : heroes) {
                writer.write(hero.name + "," + hero.className + "," + hero.lvl + "," +
                        hero.experience + "," + hero.attack + "," + hero.defense + "," + hero.hit_point);

                // Save current_weapon, current_armor, and current_helm
                writer.write(",");
                writer.write(hero.current_weapon != null ? hero.current_weapon.toString() : "null");
                writer.write(",");
                writer.write(hero.current_armor != null ? hero.current_armor.toString() : "null");
                writer.write(",");
                writer.write(hero.current_helm != null ? hero.current_helm.toString() : "null");

                // Save inventory (all artifacts)
                writer.write(",");
                for (Artifact artifact : hero.inventory) {
                    writer.write(artifact != null ? artifact.toString() : "null");
                    writer.write(";");
                }
                writer.newLine();
            }
        } catch (IOException e) {
            System.err.println("Error while saving heroes : " + e.getMessage());
            System.exit(1);
        }
    }

    public static void loadHeroes() {
        File file = new File(FILE_SAVE);

        if (!file.exists()) {
            return;
        }

        heroes.clear();
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_SAVE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                String name = data[0];
                String className = data[1];
                int level = Integer.parseInt(data[2]);
                int experience = Integer.parseInt(data[3]);
                int attack = Integer.parseInt(data[4]);
                int defense = Integer.parseInt(data[5]);
                int hit_point = Integer.parseInt(data[6]);

                Hero hero = new Hero(name, className);

                hero.lvl = level;
                hero.experience = experience;
                hero.attack = attack;
                hero.defense = defense;
                hero.hit_point = hit_point;

                hero.current_weapon = !data[7].equals("null") ? Artifact.fromString(data[7]) : null;
                hero.current_armor = !data[8].equals("null") ? Artifact.fromString(data[8]) : null;
                hero.current_helm = !data[9].equals("null") ? Artifact.fromString(data[9]) : null;

                // Load inventory
                String[] inventoryItems = data[10].split(";");
                for (int i = 0; i < inventoryItems.length; i++) {
                    hero.inventory[i] = !inventoryItems[i].equals("null") ? Artifact.fromString(inventoryItems[i]) : null;
                }

                heroes.add(hero);
            }
        } catch (IOException e) {
            System.out.println("Error while loading heroes : " + e.getMessage());
        }
    }


    public static ArrayList<Hero> getHeroesSaved() {
        return heroes;
    }

    public static void addHero(Hero newHero) {
        heroes.add(newHero);
        saveHeroes();
    }

    public void setName(String name) {
        this.name = name.replaceAll(",", "");
    }

    public void setClassName(String className) {
        this.className = className.replaceAll(",", "");
    }

    public boolean addToInventory(Artifact artifact) {
        for (int i = 0; i < INVENTORY_SIZE; i++) {
            if (inventory[i] == null) {
                inventory[i] = artifact;
                return true;
            }
        }
        return false;
    }

    public int getNbFreeInventory() {
        int nb = 0;

        for (int i = 0; i < INVENTORY_SIZE; i++) if (inventory[i] == null) nb++;

        return nb;
    }

    public void unequip(int type, int id) {
        if (id == -1) {
            for (int i = 0; i < INVENTORY_SIZE; i++) {
                if (inventory[i] == null) {
                    id = i;
                    break;
                }
            }
        }

        if (id < 0 || id >= Hero.INVENTORY_SIZE) return;
        if (inventory[id] != null) return;


        if (type == Artifact.TYPE_WEAPON) {
            inventory[id] = current_weapon;
            current_weapon = null;
        }

        if (type == Artifact.TYPE_ARMOR) {
            inventory[id] = current_armor;
            current_armor = null;
        }

        if (type == Artifact.TYPE_HELM) {
            inventory[id] = current_helm;
            current_helm = null;
        }
    }

    public void use(int id_inv) {
        if (id_inv < 0 || id_inv >= Hero.INVENTORY_SIZE) return;

        Artifact artifact = inventory[id_inv];
        if (artifact != null && artifact.getType() == Artifact.TYPE_POTION && artifact.getLvl() <= lvl)
        {
            artifact.use();
            inventory[id_inv] = null;
        }
    }

    public void equip(int id_inv) {
        if (id_inv < 0 || id_inv >= Hero.INVENTORY_SIZE) return;

        Artifact artifact = inventory[id_inv];
        if (artifact == null)
            return;


        if (artifact.getType() == Artifact.TYPE_WEAPON) {
            inventory[id_inv] = current_weapon;
            current_weapon = artifact;
        }
        if (artifact.getType() == Artifact.TYPE_ARMOR) {
            inventory[id_inv] = current_armor;
            current_armor = artifact;
        }
        if (artifact.getType() == Artifact.TYPE_HELM) {
            inventory[id_inv] = current_helm;
            current_helm = artifact;
        }
    }

    public int xpToEndLvl() {
        return (int) (lvl * 1000 + Math.pow(lvl - 1, 2) * 450);
    }

    public int getMaxPV() {
        int v = 85 + 10 * hit_point + lvl * 5;
        for (Artifact artifact : inventory) if (artifact != null) v += artifact.getPassivVitality();

        return v;
    }

    public int getMaxMana() {
        int v = 90 + lvl * 10;
        for (Artifact artifact : inventory) if (artifact != null) v += artifact.getPassivMana();


        return v;
    }

    public void addXp(int xp) {
        experience += xp;
        while (experience > xpToEndLvl()) {
            experience -= xpToEndLvl();
            lvl++;
        }
    }


    public String getAsciiArt() {
        return "     )\n" +
                "    (=)\n" +
                "   (\\_/)\n" +
                "   |\\#/|\n" +
                "   |/_\\ +)=>>\n" +
                "    T^T\n" +
                "    | |";
    }

    public void displayHero() {
        String asciiArt = getAsciiArt();

        String heroInfo = getHeroInfoFormated();

        String artifacts = String.format(
                "║%-15s : %-29s ║\n" +
                        "║%-15s : %-29s ║\n" +
                        "║%-15s : %-29s ║",
                "Current Weapon", (current_weapon != null ? current_weapon.getName() : "None"),
                "Current Armor", (current_armor != null ? current_armor.getName() : "None"),
                "Current Helm", (current_helm != null ? current_helm.getName() : "None")
        );

        // Affiche l'art ASCII à gauche et les informations du héros à droite
        System.out.println("╔════════════════╦═══════════════════════════════╗");
        String[] artLines = asciiArt.split("\n");
        String[] infoLines = heroInfo.split("\n");
        int maxLines = max(artLines.length, infoLines.length);

        // Imprime chaque ligne de l'art ASCII avec l'info correspondante
        for (int i = 0; i < maxLines; i++) {
            String artLine = i < artLines.length ? artLines[i] : "";
            String infoLine = i < infoLines.length ? infoLines[i] : "";
            System.out.printf("║ %-14s ║ %-29s ║\n", artLine, infoLine);
        }

        System.out.println("╠════════════════╩═══════════════════════════════╣");

        // Affiche les artefacts en dessous
        System.out.println(artifacts);

        System.out.println("╚════════════════════════════════════════════════╝");
    }

    public String getHeroInfoFormated() {
        return String.format(
                "%-15s : %s\n" +
                        "%-15s : %s\n" +
                        "%-15s : %d\n" +
                        "%-15s : %d\n" +
                        "%-15s : %d\n" +
                        "%-15s : %d\n" +
                        "%-15s : %d\n",
                "Name", name,
                "Class", className,
                "Level", lvl,
                "Experience", experience,
                "Attack", attack,
                "Defense", defense,
                "Hit Points", hit_point
        );
    }

    public void move(int dx, int dy) {
        Map.Tile tile = Game.game.map.getTile(x + dx, y + dy);

        if (tile == null) {
            Game.game.hero.addXp(Game.game.map.size * Game.game.map.size * 4);
            Game.game.input.reload();
            Game.game.rpgInterface.modal = new Block_LvlComplete();
            Hero.saveHeroes();

        } else {
            if (tile.water)
                return;
        }
        x += dx;
        y += dy;
    }

    public void setMana(int m) {
        mana = min(m, getMaxMana());
    }

    public void addPV(int p) {
        pv = min(pv + p, getMaxPV());

    }

    public void addMana(int m) {
        mana = min(mana + m, getMaxMana());

    }

    public void addEffect(Effect effect) {
        effects.add(effect);
    }

    public void updateEffect() {
        for (int i = effects.size() - 1; i >= 0; i--) {
            effects.get(i).duration--;
            if (effects.get(i).duration <= 0)
                effects.remove(i);
        }
    }

    public void regenerate() {

        int v = lvl / 4 + 1;
        for (Artifact artifact : inventory) if (artifact != null) v += artifact.getPassivRegeneration();

        addPV(v);
        addMana(v);

    }

    public int getDefenseFight() {
        float precision = 0;
        for (Artifact artifact : inventory) if (artifact != null) precision += artifact.getPassivPrecision() / 32f;
        precision = min(1, precision);
        for (Artifact artifact : inventory) if (artifact != null) precision += artifact.getPassivLuck() / 10f;

        int v = (int) (defense + (4 + lvl / 2) * ((1 - Math.random() * (1 - precision)) - 0.5));

        for (Artifact artifact : inventory) if (artifact != null) v += artifact.getPassivProtection();

        return v;
    }


    public int getAttackFight() {
        float precision = 0;
        for (Artifact artifact : inventory) if (artifact != null) precision += artifact.getPassivPrecision() / 32f;
        precision = min(1, precision);
        for (Artifact artifact : inventory) if (artifact != null) precision += artifact.getPassivLuck() / 10f;

        int v = (int) (getAttack() + (4 + lvl / 2) * ((1 - Math.random() * (1 - precision)) - 0.5));

        for (Artifact artifact : inventory) if (artifact != null) v += artifact.getPassivPower();

        return v;
    }

    public boolean removeMana(int m) {
        float f = 100;
        for (Artifact artifact : inventory) if (artifact != null) f -= artifact.getPassivEndurance();
        f = max(20, f);
        m = (int) (m * f / 100);

        if (mana < m)
            return false;

        mana -= m;
        return true;
    }

    public int getEffectAtt() {
        int v = 0;
        for (Effect effect : effects) v += effect.attack;
        return v;
    }

    public int getEffectDef() {
        int v = 0;
        for (Effect effect : effects) v += effect.defense;
        return v;
    }


    public void throwE(int id) {
        if (id < 0 || id >= Hero.INVENTORY_SIZE)
            return;

        inventory[id] = null;
    }

    public Artifact getInventory(int id)
    {
        if (id < 0 || id >= Hero.INVENTORY_SIZE)
            return null;

        return inventory[id];
    }

    public int getLvl() {
        return lvl;
    }

    public int getY() {
        return y;
    }

    public int getX() {
        return x;
    }

    public String getName() {
        return name;
    }

    public String getClassName() {
        return className;
    }

    public int getExperience() {
        return experience;
    }

    public int getHit_point() {
        return hit_point;
    }

    public int getPv() {
        return pv;
    }

    public int getMana() {
        return mana;
    }

    public Artifact getCurrent_weapon() {
        return current_weapon;
    }

    public Artifact getCurrent_armor() {
        return current_armor;
    }

    public Artifact getCurrent_helm() {
        return current_helm;
    }

    public void removePv(int degat) {
        pv = max(0, pv-degat);
    }


}
=== ./Model/Monster.java ===
package org.plefevre.Model;


import org.plefevre.Artifact;
import org.plefevre.ArtifactLibrary;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import static java.lang.Math.max;
import static java.lang.Math.min;

public class Monster {
    String name;
    int lvl;
    int mana;
    int pv;
    int initial_pv;
    int initial_mana;
    int attack;
    int defense;

    public Monster(int lvl) {
        this.lvl = lvl;
        name = MonsterInfo.getRandomName(lvl);

        initial_pv = calcInitial_pv();
        initial_mana = calcInitial_mana();
        attack = calcAttack();
        defense = calcDefense();

        pv = initial_pv;
        mana = initial_mana;
    }

    private int calcDefense() {
        return (int) (2 + lvl * (2 + Math.random() * 3));
    }

    private int calcAttack() {
        return (int) (2 + lvl * (2 + Math.random() * 3));
    }

    public int calcInitial_pv() {
        return (int) (20 + lvl * (20 + Math.random() * 7));
    }

    public int calcInitial_mana() {
        return (int) (30 + lvl * (10 + Math.random() * 4));
    }


    public int xpGet() {
        return (int) (lvl * 400 * (0.9 + Math.random() * 0.1));
    }

    public String getAsciiArt() {
        if (name.equals("Rat")) return
                "    .  ,\n" +
                        "   (\\;/)\n" +
                        "  oo   \\//,        _\n" +
                        ",/_;~      \\,     / '\n" +
                        "\"'    (  (   \\    !\n" +
                        "      //  \\   |__.'\n" +
                        "    '~  '~----''";
        if (name.equals("Goblin")) return
                "  ,      ,\n" +
                        " /(.-\"\"-.)\\\n" +
                        " |  o  o  |\n" +
                        " \\  ( )   /\n" +
                        "  '-/  \\-' \n" +
                        "    \\__/  \n" +
                        "   /    \\\n";
        if (name.equals("Kobold")) return
                "          {\\ /}     \n" +
                        "       /\\ | \" | /\\\n" +
                        "      / \\\\(o o)/ \\\\\n" +
                        "      |  :/ ^ \\:  |\n" +
                        "      |  ((   ))  |\n" +
                        "      |'  \\\" \"/  '|\n" +
                        "           )I(\n" +
                        "          \"\"`\"\"";
        if (name.equals("Giant Spider")) return
                "\n" +
                        "\n" +
                        "     /^\\ ___ /^\\\n" +
                        "    //^\\(o o)/^\\\\\n" +
                        "   /'<^~``~''~^>`\\";
        if (name.equals("Orc")) return "   --\\\\|//--\n" +
                "  { --   -- }\n" +
                "|\\{{o | | o}}/|\n" +
                "\\ \\-  / \\  -/ /\n" +
                " \\/|   =   |\\/\n" +
                "  |_ V---V _|\n" +
                "    \\_)_(_/";
        if (name.equals("Bandit")) return "⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀\n" +
                "⠀⣠⣶⣿⣿⣿⣿⣷⣄⠀\n" +
                "⢰⣿⣿⣿⣿⣿⣿⣿⣿⣆\n" +
                "⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿\n" +
                "⣠⣴⣶⣦⣤⣤⣴⣶⣦⣄\n" +
                "⢿⣧⣤⣼⣿⣿⣧⣤⣼⡿\n" +
                "⠀⠀⠉⠁⠀⠀⠈⠉⠀⠀";
        if (name.equals("Troll")) return "\n\n\n( o . o)";
        if (name.equals("Hobgoblin")) return
                "  /\\    /\\\n" +
                        " /(.-\"\"-.)\\\n" +
                        " |  o  o  |\n" +
                        " \\   ( )   /\n" +
                        "  '-/  \\-' \n" +
                        "    \\__/  \n" +
                        "   /    \\\n";
        ;
        if (name.equals("Zombie")) return "\n\n\n\n(o_o)";
        if (name.equals("Ghoul")) return "";
        if (name.equals("Warg")) return "";
        if (name.equals("Vampire")) return "";
        if (name.equals("Minotaur")) return "";
        if (name.equals("Basilisk")) return "";
        if (name.equals("Werewolf")) return "";
        if (name.equals("Ogre")) return "";
        if (name.equals("Manticore")) return "";
        if (name.equals("Skeleton King")) return "";
        if (name.equals("Lich")) return "";
        if (name.equals("Wyvern")) return "";
        if (name.equals("Wraith")) return "";
        if (name.equals("Beholder")) return "";
        if (name.equals("Stone Golem")) return "";
        if (name.equals("Dragon")) return "     _(,  {\\V/}  ,)_\n" +
                "       /\\ | \" | /\\\n" +
                "      //\\\\(o o)//\\\\\n" +
                "      ||::/ ^ \\::||\n" +
                "      |||((   ))|||\n" +
                "      |'  \\\" \"/  '|\n" +
                "           )I(\n" +
                "          \"\"`\"\"";
        if (name.equals("Ancient Red Dragon")) return
                "(______ <\\-/> ______)\n" +
                        " /_.-=-.\\| \" |/.-=-._\\\n" +
                        "  /_    \\(o_o)/    _\\\n" +
                        "   /_  /\\/ ^ \\/\\  _\\\n" +
                        "     \\/ | / \\ | \\/\n" +
                        "       /((( )))\\\n" +
                        "     __\\ \\___/ /__\n" +
                        "   (((---'   '---)))";


        return "";
    }

    public int getMaxPV() {
        return initial_pv;
    }

    public int getMaxMana() {
        return initial_mana;
    }

    public void setMana(int m) {
        mana = min(m, initial_mana);
    }

    public ArrayList<Artifact> getArtifact() {
        ArrayList<Artifact> artifacts = new ArrayList<>();

        if (Math.random() > 0.4f) artifacts.add(getOneArtifact());
        if (Math.random() > 0.75f) artifacts.add(getOneArtifact());
//        artifacts.add(getOneArtifact());
//        artifacts.add(getOneArtifact());

        return artifacts;
    }

    public Artifact getOneArtifact() {
        return ArtifactLibrary.artifactLibrary.getArtifactByLevel(lvl, 2);
    }

    public String getName() {
        return name;
    }

    public int getLvl() {
        return lvl;
    }

    public int getMana() {
        return mana;
    }

    public int getPv() {
        return pv;
    }

    public int getInitial_pv() {
        return initial_pv;
    }

    public int getInitial_mana() {
        return initial_mana;
    }

    public int getAttack() {
        return attack;
    }

    public int getDefense() {
        return defense;
    }

    public void removePv(int degat) {
        pv = max(0, pv-degat);
    }

    public void removeMana(int manaConsom) {
        mana = max(0, mana-manaConsom);
    }
}


class MonsterInfo {
    String name;
    int baseLevel;

    static List<MonsterInfo> monsterList = new ArrayList<>();

    public MonsterInfo(String name, int baseLevel) {
        this.name = name;
        this.baseLevel = baseLevel;
    }

    public static String getRandomName(int lvl) {

        if (monsterList.isEmpty()) {
            addMonsters();
        }

        List<String> possibleMonsters = new ArrayList<>();

        for (MonsterInfo monster : monsterList) {
            if (monster.baseLevel >= lvl - 2 && monster.baseLevel <= lvl + 2) {
                possibleMonsters.add(monster.name);
            }
        }

        if (possibleMonsters.isEmpty()) {
            return "Unknown Monster";
        }

        Random random = new Random();
        return possibleMonsters.get(random.nextInt(possibleMonsters.size()));
    }

    public static void addMonsters() {
        monsterList.clear();
        monsterList.add(new MonsterInfo("Rat", 1));
        monsterList.add(new MonsterInfo("Goblin", 2));
        monsterList.add(new MonsterInfo("Kobold", 3));
        monsterList.add(new MonsterInfo("Giant Spider", 4));
        monsterList.add(new MonsterInfo("Orc", 5));
        monsterList.add(new MonsterInfo("Bandit", 6));
        monsterList.add(new MonsterInfo("Troll", 6));
        monsterList.add(new MonsterInfo("Hobgoblin", 7));
        monsterList.add(new MonsterInfo("Zombie", 8));
        monsterList.add(new MonsterInfo("Ghoul", 9));
        monsterList.add(new MonsterInfo("Warg", 10));
        monsterList.add(new MonsterInfo("Vampire", 11));
        monsterList.add(new MonsterInfo("Minotaur", 11));
        monsterList.add(new MonsterInfo("Basilisk", 12));
        monsterList.add(new MonsterInfo("Werewolf", 13));
        monsterList.add(new MonsterInfo("Ogre", 14));
        monsterList.add(new MonsterInfo("Manticore", 15));
        monsterList.add(new MonsterInfo("Skeleton King", 15));
        monsterList.add(new MonsterInfo("Lich", 16));
        monsterList.add(new MonsterInfo("Wyvern", 17));
        monsterList.add(new MonsterInfo("Wraith", 18));
        monsterList.add(new MonsterInfo("Beholder", 18));
        monsterList.add(new MonsterInfo("Stone Golem", 19));
        monsterList.add(new MonsterInfo("Dragon", 20));
        monsterList.add(new MonsterInfo("Ancient Red Dragon", 21));

    }

    public String getName() {
        return name;
    }

    public int getBaseLevel() {
        return baseLevel;
    }
}
=== ./Artifact.java ===
package org.plefevre;

import org.plefevre.Model.Hero;

import java.util.ArrayList;

public class Artifact {
    public final static int TYPE_WEAPON = 1;
    public final static int TYPE_ARMOR = 2;
    public final static int TYPE_HELM = 3;
    public final static int TYPE_POTION = 4;
    public final static int TYPE_ACCESSORY = 5;

    private String name;
    private int type;
    private int lvl;
    protected char[] ascii;
    protected byte[] ascii_color;
    private int class_destination = -1;
    private int attack;
    private int defense;

    public Artifact(String name, int type, int lvl) {
        this.name = name;
        this.type = type;
        setLvl(lvl);
    }

    public Artifact() {

    }

    public String getName() {
        return name;
    }

    public int getType() {
        return type;
    }

    public int getLvl() {
        return lvl;
    }

    @Override
    public String toString() {

        String asciiString = new String(ascii);

        StringBuilder asciiColorString = new StringBuilder();
        for (int i = 0; i < ascii_color.length; i++) {
            byte b = ascii_color[i];
            asciiColorString.append(String.format("%4d", b));
        }

        return name + ":" + type + ":" + lvl + ":" + attack + ":" + defense + ":" + class_destination + ":" + asciiColorString + ":" + asciiString;
    }

    public static Artifact fromString(String data) {
        String[] parts = data.split(":", 8);

        if (parts.length != 8) {
//            return null;
            throw new IllegalArgumentException("Invalid artifact data: " + data);
        }

        Artifact artifact = new Artifact();
        artifact.name = parts[0];
        artifact.type = Integer.parseInt(parts[1]);
        artifact.lvl = Integer.parseInt(parts[2]);
        artifact.attack = Integer.parseInt(parts[3]);
        artifact.defense = Integer.parseInt(parts[4]);
        artifact.class_destination = Integer.parseInt(parts[5]);
        String colorParts = parts[6];
        artifact.ascii = parts[7].toCharArray();

        artifact.ascii_color = new byte[colorParts.length() / 4];
        for (int i = 0; i < colorParts.length(); i += 4) {
            artifact.ascii_color[i / 4] = Byte.parseByte(
                    colorParts.substring(i, i + 4).replaceAll(" ", ""));
        }
        return artifact;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setType(int type) {
        this.type = type;
    }

    public void setLvl(int lvl) {
        this.lvl = lvl;

        setAttack();
        setDefense();
    }

    public void setAscii(char[] ascii) {
        this.ascii = ascii;
    }

    /*
        public void setAscii_color(byte[] ascii_color) {
            this.ascii_color = ascii_color;
        }
    */
    public void setAscii_color(byte... b) {
        this.ascii_color = b;
    }

    public void setAscii_color(int... b) {
        this.ascii_color = new byte[b.length];
        for (int i = 0; i < b.length; i++) {
            ascii_color[i] = (byte) b[i];
        }
    }


    public void setClass_destination(int class_destination) {
        this.class_destination = class_destination;
    }

    public byte getColor() {
        if (getLvl() > 14)
            return 6;
        else if (getLvl() > 7)
            return 3;

        return 2;
    }

    public String getName(int width) {
        String name = getName();
        if (name.length() > width - 2)
            name = name.substring(0, width - 4) + "..";

        return name;
    }

    public void setAttack() {
        if (type == 1)
            attack = (int) (lvl * (2 + Math.random() * 0.5));

        if (!Game.game.hero.className.equalsIgnoreCase("mage") && class_destination == Hero.CLASS_MAGE)
            attack*= 0.6f;

        if (!Game.game.hero.className.equalsIgnoreCase("archey") && class_destination == Hero.CLASS_ARCHER)
            attack*= 0.6f;

        if (!Game.game.hero.className.equalsIgnoreCase("warrior") && class_destination == Hero.CLASS_WARRIOR)
            attack*= 0.6f;
    }

    public void setDefense() {
        if (type == 2) defense = (int) (lvl * (2 + Math.random() * 0.5));
        if (type == 3) defense = (int) (lvl * (1 + Math.random() * 0.25));
    }

    public int getAttack() {
        return attack;
    }

    public int getDefense() {
        return defense;
    }

    public void use() {
        if (type == 4) {
            if (name.equalsIgnoreCase("Minor Health Potion")) Game.game.hero.addPV(25);
            if (name.equalsIgnoreCase("Minor Mana Potion")) Game.game.hero.addMana(25);
            if (name.equalsIgnoreCase("Minor Attack Potion")) Game.game.hero.addEffect(new Effect(20, 3, 0));
            if (name.equalsIgnoreCase("Minor Defense Potion")) Game.game.hero.addEffect(new Effect(20, 0, 3));
            if (name.equalsIgnoreCase("Minor Experience Potion")) Game.game.hero.addXp(2000);

            if (name.equalsIgnoreCase("Health Potion")) Game.game.hero.addPV(60);
            if (name.equalsIgnoreCase("Mana Potion")) Game.game.hero.addMana(60);
            if (name.equalsIgnoreCase("Attack Potion")) Game.game.hero.addEffect(new Effect(20, 6, 0));
            if (name.equalsIgnoreCase("Defense Potion")) Game.game.hero.addEffect(new Effect(20, 0, 6));
            if (name.equalsIgnoreCase("Experience Potion")) Game.game.hero.addXp(6000);

            if (name.equalsIgnoreCase("Greater Health Potion")) Game.game.hero.addPV(150);
            if (name.equalsIgnoreCase("Greater Mana Potion")) Game.game.hero.addMana(150);
            if (name.equalsIgnoreCase("Greater Attack Potion")) Game.game.hero.addEffect(new Effect(20, 10, 0));
            if (name.equalsIgnoreCase("Greater Defense Potion")) Game.game.hero.addEffect(new Effect(20, 0, 10));
            if (name.equalsIgnoreCase("Greater Experience Potion")) Game.game.hero.addXp(20000);

        }
    }

    public String getNameEffect() {
        String name = getName();
        String effect = "";
        if (getDefense() != 0) effect += getDefense() + " def";
        if (getDefense() != 0 && getAttack() != 0)
            effect += " ";
        if (getAttack() != 0) effect += getAttack() + " att";

        return name + " (+" + effect + ")";
    }

    public String getStringLog() {
        return "Name : " + getName() + "\n"
                + "Level : " + getLvl() + "\n"
                + "Attack : " + getAttack() + "\n"
                + "Defense : " + getDefense();
    }

    public int getPassivRegeneration() {
        if (name.equalsIgnoreCase("Amulet of Regeneration")) return 2;
        if (name.equalsIgnoreCase("Amulet of Spirit")) return 1;
        if (name.equalsIgnoreCase("Bracelet of Energy")) return 2;
        if (name.equalsIgnoreCase("Bracelet of Regeneration")) return 8;

        return 0;
    }

    public int getPassivVitality() {
        if (name.equalsIgnoreCase("Ring of Vitality")) return 10;
        if (name.equalsIgnoreCase("Ring of the Mage")) return 5;
        if (name.equalsIgnoreCase("Amulet of Spirit")) return 2;
        if (name.equalsIgnoreCase("Amulet of the Berserker")) return 5;
        if (name.equalsIgnoreCase("Amulet of the Titan")) return 15;
        if (name.equalsIgnoreCase("Amulet of Vitality")) return 40;
        if (name.equalsIgnoreCase("Bracelet of the Berserker")) return 7;
        if (name.equalsIgnoreCase("Bracelet of the Titan")) return 20;

        return 0;
    }


    public int getPassivMana() {

        if (name.equalsIgnoreCase("Ring of the Mage")) return 30;
        if (name.equalsIgnoreCase("Bracelet of Mana")) return 35;
        if (name.equalsIgnoreCase("Bracelet of Energy")) return 10;

        return 0;
    }

    public int getPassivProtection() {
        if (name.equalsIgnoreCase("Ring of Protection")) return 1;
        if (name.equalsIgnoreCase("Ring of the Warrior")) return 2;
        if (name.equalsIgnoreCase("Ring of Resilience")) return 3;
        if (name.equalsIgnoreCase("Ring of Fury")) return -4;
        if (name.equalsIgnoreCase("Amulet of Shielding")) return 3;
        if (name.equalsIgnoreCase("Amulet of Spirit")) return 1;
        if (name.equalsIgnoreCase("Amulet of the Berserker")) return 1;
        if (name.equalsIgnoreCase("Amulet of Magic Shield")) return 8;
        if (name.equalsIgnoreCase("Amulet of Resilience")) return 10;
        if (name.equalsIgnoreCase("Bracelet of Defense")) return 3;
        if (name.equalsIgnoreCase("Bracelet of Magic Defense")) return 4;
        if (name.equalsIgnoreCase("Bracelet of Protection")) return 6;
        if (name.equalsIgnoreCase("Bracelet of the Berserker")) return 2;


        return 0;
    }

    public int getPassivPower() {
        if (name.equalsIgnoreCase("Ring of Power")) return 1;
        if (name.equalsIgnoreCase("Ring of Strength")) return 2;
        if (name.equalsIgnoreCase("Ring of Fortitude")) return 2;
        if (name.equalsIgnoreCase("Ring of Fire")) return 3;
        if (name.equalsIgnoreCase("Ring of the Warrior")) return 2;
        if (name.equalsIgnoreCase("Ring of Shadows")) return 1;
        if (name.equalsIgnoreCase("Ring of Fury")) return 6;
        if (name.equalsIgnoreCase("Ring of the Phoenix")) return 4;
        if (name.equalsIgnoreCase("Ring of Mastery")) return 2;
        if (name.equalsIgnoreCase("Amulet of Fortitude")) return 1;
        if (name.equalsIgnoreCase("Amulet of Power")) return 1;
        if (name.equalsIgnoreCase("Amulet of the Berserker")) return 5;
        if (name.equalsIgnoreCase("Amulet of the Titan")) return 1;
        if (name.equalsIgnoreCase("Amulet of Shadows")) return 0;
        if (name.equalsIgnoreCase("Amulet of Mastery")) return 3;
        if (name.equalsIgnoreCase("Bracelet of Agility")) return 1;
        if (name.equalsIgnoreCase("Bracelet of Fortitude")) return 1;
        if (name.equalsIgnoreCase("Bracelet of the Berserker")) return 5;
        if (name.equalsIgnoreCase("Bracelet of Mastery")) return 3;
        if (name.equalsIgnoreCase("Bracelet of the Titan")) return 4;
        if (name.equalsIgnoreCase("Bracelet of Attack Boost")) return 2;

        return 0;
    }

    public int getPassivPrecision() {
        if (name.equalsIgnoreCase("Ring of Precision")) return 5;
        if (name.equalsIgnoreCase("Ring of the Mage")) return 5;
        if (name.equalsIgnoreCase("Ring of Mastery")) return 14;
        if (name.equalsIgnoreCase("Amulet of Spirit")) return 6;
        if (name.equalsIgnoreCase("Amulet of Mastery")) return 12;
        if (name.equalsIgnoreCase("Bracelet of Mastery")) return 11;

        return 0;
    }

    public int getPassivEndurance() {
        if (name.equalsIgnoreCase("Ring of Endurance")) return 10;
        if (name.equalsIgnoreCase("Ring of the Mage")) return 10;
        if (name.equalsIgnoreCase("Ring of Shadows")) return 16;
        if (name.equalsIgnoreCase("Ring of the Phoenix")) return 10;
        if (name.equalsIgnoreCase("Ring of Mastery")) return 28;
        if (name.equalsIgnoreCase("Amulet of the Berserker")) return -4;
        if (name.equalsIgnoreCase("Amulet of Shadows")) return 12;
        if (name.equalsIgnoreCase("Amulet of Mastery")) return 24;
        if (name.equalsIgnoreCase("Amulet of Endurance")) return 24;
        if (name.equalsIgnoreCase("Bracelet of Endurance")) return 16;
        if (name.equalsIgnoreCase("Bracelet of the Berserker")) return -6;
        if (name.equalsIgnoreCase("Bracelet of Mastery")) return 30;

        return 0;
    }

    public int getPassivLuck() {
        if (name.equalsIgnoreCase("Ring of Luck")) return 5;
        if (name.equalsIgnoreCase("Ring of the Mage")) return 5;
        if (name.equalsIgnoreCase("Ring of Shadows")) return 8;
        if (name.equalsIgnoreCase("Ring of Mastery")) return 7;
        if (name.equalsIgnoreCase("Amulet of Spirit")) return 6;
        if (name.equalsIgnoreCase("Amulet of Shadows")) return 6;
        if (name.equalsIgnoreCase("Amulet of Mastery")) return 10;
        if (name.equalsIgnoreCase("Bracelet of Mastery")) return 5;

        return 0;
    }

    public ArrayList<PassivEffect> getPassivEffect() {
        ArrayList<PassivEffect> l = new ArrayList<>();

        if (getPassivRegeneration() != 0) l.add(new PassivEffect("Regeneration", getPassivRegeneration()));
        if (getPassivVitality() != 0) l.add(new PassivEffect("Vitality", getPassivVitality()));
        if (getPassivMana() != 0) l.add(new PassivEffect("Mana", getPassivMana()));
        if (getPassivProtection() != 0) l.add(new PassivEffect("Protection", getPassivProtection()));
        if (getPassivPower() != 0) l.add(new PassivEffect("Power", getPassivPower()));
        if (getPassivPrecision() != 0) l.add(new PassivEffect("Precision", getPassivPrecision()));
        if (getPassivEndurance() != 0) l.add(new PassivEffect("Endurance", getPassivEndurance()));
        if (getPassivLuck() != 0) l.add(new PassivEffect("Luck", getPassivLuck()));

        return l;
    }

    public class PassivEffect {
        String name;
        int value;

        public PassivEffect(String name, int value) {
            this.name = name;
            this.value = value;
        }

        public String getName() {
            return name;
        }

        public int getValue() {
            return value;
        }
    }

    public char[] getAscii() {
        return ascii;
    }

    public byte[] getAscii_color() {
        return ascii_color;
    }
}
